type: "SNIPPET_NOTE"
folder: "d155fa926dc4390a93fa"
title: "HTML / CSS"
description: "HTML / CSS"
snippets: [
  {
    name: "General.html"
    mode: "HTML"
    content: '''
      <!--HTML要素の属性-->
      meta要素に関する説明の際に出てきた属性について学びましょう。
      属性とは、HTML要素の役割を細かく定義するための付加的な情報のことです。
      
      <meta charset="UTF-8" />
      要素名　属性名　　属性値
            ーーーー属性ーーー
      ーーーーー要素ーーーーーーー
      
      
      
      <!--HTML-->
      head要素とbody要素という部分で構成されています。
      
      
      <!--head要素-->
      メタ情報と呼ばれるサイト自体に関する情報を定義する部分です。こちらで定義したものは見た目には大きく影響しません。
      ページを閲覧する人が知る必要のないHTML文章の情報を記述するものです。例えば、言語の種類などです。 ここに書かれたコードはブラウザ内には表示されません。
      {
        title要素	サイトのタイトルを付ける
        meta要素	文章の情報を保存し、ブラウザや検索エンジン（Googleなど）に知らせるため
        link要素	スタイルシートを指定する
        script要素	JavaScriptを指定する
        style要素 cssを書き込める(内部参照)
      }
      
      
      
      <!--body要素-->
      箱の構成やテキストなど、実際に見た目に大きく反映されるものを定義していく部分です。
      body要素の開始タグと閉じタグのあいだには、HTMLを記述していきます。 ここに記述されたものがブラウザ内に表示されます。
      
      
      <!--<!DOCTYPE HTML>-->
      この <!DOCTYPE HTML> は、この文章がHTML文章であることを宣言する要素です。
      HTMLを書くときには、必要になるものです。
      
      
      <!--<meta charset="UTF-8" />-->
      meta要素は、文章に関する情報を指定する時に使用します。
      また、charset=に続く文字は文書の「文字コード」を指定します。
      文字コードとは、コンピュータでの文字の処理の仕方を指定するものです。
      他にもSHIFT-JISなどがありますが、主流はUTF-8なので、UTF-8を指定しましょう。
      記述しない場合、文章が文字化けをしてしまって読めなくなってしまいます。
      
      
      <!--ブロック要素-->
      ブロック要素は、言葉の通り「一つのブロック」として扱われます。基本的には、CSSで高さと横幅を指定することになります。
      CSSで何も指定していない場合、ウィンドウの左右いっぱいに表示され、なおかつ上下に改行が入ります。
      長方形の長い箱とおぼえておくとよいでしょう。
      ブロック要素を作るHTML要素の1つに、 div要素があります。
      レイアウトを作るときによく使います。
      
      
      <!--インライン要素-->
      インライン要素は、テキストを装飾するときによく使います。テキストの一部を囲い、そこに役割を与えます。あくまでも文字の一部の範囲指定なので、横幅は中身のテキストの横幅と同一です。また、インライン要素は連続して横に並びます。
      
      
      <!--h要素-->
      headingの略で、見出しとして使われるブロック要素です。h1, h2, h3, h4, h5, h6と６つのh要素があり、これらは見出しの内容によって使い分けます。h1要素が一番大きな見出しで、h6要素に近づくにつれて小さな見出しになっていきます。
      
      
      <!--p要素-->
      paragraphの略で、段落を示すブロック要素です。文章を書く際、段落を作る時に使います。
      
      
      <!-- header要素-->
      上部にあるものを示すことができます。
      header要素は、ブロック要素となります。
      
      
      <!--footer要素-->
      下部にあるものを示すことができます。
      footer要素は、ブロック要素となります。
      
      <!--div要素-->
      div要素は、「特定の意味が無い」ブロック要素です。
      汎用的に様々な用途で使うことができます。レイアウトを作成する際に重宝されます。div要素を使って複数の要素をひとかたまりで管理することで、cssでのデザイン適用やブロック要素の配置を簡単に行えるようになります。
      
      <!--ul要素-->
      順序のないリストを示すブロック要素です。li要素と組み合わせて使用します。
      
      <!--ol要素-->
      順序のあるリストを示すブロック要素です。こちらも、li要素と組み合わせて使用します。
      
      <!--li要素-->
      リストの項目を示すブロック要素です。ul要素、またはol要素の間に記述します。
      
      <!--table要素-->
      表を作成するブロック要素です。この要素と以下に記述するth要素、tr要素、td要素を組み合わせることによって、表構造を作成することができます。
      
      <!--th要素-->
      表の見出しを作成するブロック要素です。
      
      <!--tr要素-->
      表の横方向の一行を定義するブロック要素です。
      
      <!--td要素-->
      表のデータを入れるブロック要素です。
      
      
      <!--img要素-->
      img要素を使うと、Webサイトで画像を表示させることができます。
      画像がどこにあるのかという場所を指定する src属性 、画像が表示されなかった場合に代替テキストなどを表示するための alt属性 を指定して使います
      
      
      
      
      <!--form要素-->
      「アンケートフォーム」や「お問い合わせフォーム」を表すブロック要素です。HTMLだけでは、何らかの情報を送信することができません。Ruby on RailsやPHPフレームワークなどと組み合わせて、フォームから情報を送信することが可能になります。
      
      
      <!--input要素-->
      フォームの入力欄や実行ボタンなどを作成することができる要素です。
      input要素にはtype属性というものがあり、それを指定することによって様々な種類のフォーム部品を作り出すことができます。
      input要素はtype属性、name属性など様々な属性があり、それらを組み合わせることによって複雑な処理を行うことができます。
      
      
      <!--textarea要素-->
      複数行のテキスト入力欄を作成する要素です。
      
      
      <!--label要素-->
      フォームの構成部品（一行テキストボックス・チェックボックス・ラジオボタン等）と、 その項目名（ラベル）を明確に関連付けるための要素です。
      フォームの部品とテキストを一緒にタグで囲むことにより関連付けが行われ、テキストをクリックするだけでチェックボックスにチェックを入れることができるようになります。
      
      
      <!--select要素-->
      メニュー（セレクトボックス）を作成するときに使用します。メニューの選択肢は、select要素内に配置するoption要素で作成します。
      
      
      <!--option要素-->
      メニューの選択肢を作成するときに使用します。この要素内の文字列が、メニューの選択肢として表示されます。この要素は、select要素の間に記述します。
      
      
      <!--type属性-->
      必須属性
      input要素がどんな種類のフォームにするか指定します。
      <input type="text">
      
      指定	フォーム部品
      text	    １行のテキスト入力欄を作成します
      checkbox	チェックボックスを複数作成することができます
      radio	    複数の中から１つしか選択できない、ラジオボタンを作ります
      submit	  送信ボタンを作ります
      number    数字onlyになる
      email
      password
      
      
      <!--name属性-->
      入力された情報に固有の名前をつけることができます。
      inputの見分けをつけるもの、同じものがあると正しく動作しなくする可能性がある
      
      
      <!--value属性-->
      こちらはフォームの種類によって挙動が変わってくる属性になります。
      type="text"の場合、そのテキスト入力欄に初期値をつけることができます。
      初期値とは、フォームにもともと入力されている値のことです。
      type = "button" の場合、ボタンに文字をつけることができます。
      
      
      <!--placeholder属性-->
      テキストなどの入力欄に文字を表示することができます。
      
      
      <!--asideタグ-->
      囲った部分がwebサイトの補足情報にあたるコンテンツであると伝えるためのタグです。
      
      
      <!--articleタグ-->
      articleタグは、それが何らかの記事だということを伝えるためのタグです。
    '''
  }
  {
    name: "General.css"
    mode: "CSS"
    content: '''
      CSS要素の属性{
        p 　　　{color    :  red;}
        セレクタ プロパティ    値
      }
      
      
      idセレクタ{
        HTMLの特定の要素にid属性をつけ、それを目印にして、スタイルを適用するものです。
        id属性は、HTMLの文章の中でid名を一度のみ使うことができます。
        HTMLではid="xxx"と書くことで、id名(xxx)をつけることができ、
        CSSでは、#xxxとシャープの後にid名を指定します。
      }
      
      
      classセレクタ{
        全てのhtmlタグにはclassという属性を付与することができます。
        これは、あるhtml要素に対してつける識別子です。
        class属性は、HTMLの文章の中で同じ名前で何度も使うことができます。
        HTMLでは、class="xxx"(xxx)と書きますが、CSSでは、
        「.xxx」とピリオドの後にclass名を指定します。
      }
      
      
      colorプロパティ{
        文字の色はカラー名,hex,rgb,cmyk,rgbaなどで指定することができます。
        一般的に使用されているのは、カラー名,hex,rgb,rgbaです。
      }
      
      
      heightプロパティ{
        要素の高さを指定するプロパティです。数値は、px/pt/em/%などを指定します。
      }
      
      
      widthプロパティ{
        要素の幅を指定するプロパティです。数値は、px/pt/em/%などを指定します。
      }
      
      
      background-colorプロパティ{
        要素の背景色を指定するプロパティです。代表的な色は"red"や"blue"などの文字で
        示すことができますが、"#fff"などのcssのカラーコードで指定することもできます。
      }
      
      
      floatプロパティ{
        指定された要素を左または右に寄せて配置する際に使用します。
        後に続く内容は、その反対側に回り込みます。
      }
      
      
      clearfix{
        floatによって起こる上記のような問題を回避するために、
        clearfixというやり方が一般的に使われています。
        これは、擬似要素の :after を使ったものです。
        :afterを使うことで、ボックス要素内の最後の子要素の後に新たなインラインボックスを
        作ることができます。
        :afterで作った新たなインラインボックスに対して、
        clear: both（回りこみ解除）とdisplay: block（ブロック要素）を指定することによって、
        回り込みを解除します。
      }
      
      
      擬似要素{
        ある箇所に対してHTMLに手を加えることなくスタイルを指定することができる要素です。
        例えば、「:after」の他にも「:hover」などが存在し、
        「:hover」はマウスポインタが乗った時のcssの設定を行うことができます。
      }
      
      
      contentプロパティ{
        擬似要素afterによって作成された要素の中身を指定するためのプロパティです。
        afterを利用する際は必須になるので、何も表示したくない場合は値を""とし空白とします。
      }
      
      
      clearプロパティ{
        clearプロパティは、floatによって無くなる要素の高さを正常に戻してくれるプロパティです。
        手前の要素をfloatしたあと、floatによって回り込ませたくない要素に対して使います。
        値は both とすることが多いです。
      }
      
      
      displayプロパティ{
        displayプロパティは、要素の種類(ブロック要素、インライン要素)を変更することができる
        プロパティです。値には、変更したい要素の種類を取ります
      }
      
      
      marginプロパティ{
        箱の外側に余白を取ります。指定方法は、pxになります。
        ブロック要素の細かい配置を変えるにはmarginプロパティを使います。
        指定方法	説明
        margin: 1px;	[上下左右]の余白をまとめて1pxに指定
        margin: 1px 1px;	[上下][左右]の余白をそれぞれ1pxに指定
        margin: 1px 1px 1px;	[上][左右][下]の余白をそれぞれ1pxに指定
        margin: 1px 1px 1px 1px;	[上][右][下][左]の余白をそれぞれ1pxに指定
        
        marginプロパティで、左右の値をautoに指定することで、
        ブロック要素を中央に配置することができます。
      }
      
      
      paddingプロパティ{
        箱の内側に余白を取ります。指定方法はmarginと同様pxになります。
        指定方法	説明
        padding: 1px;	[上下左右]の内側の余白をまとめて1pxに指定
        padding: 1px 1px;	[上下][左右]の内側の余白をそれぞれ1pxに指定
        padding: 1px 1px 1px;	[上][左右][下]の内側の余白をそれぞれ1pxに指定
        padding: 1px 1px 1px 1px;	[上][右][下][左]の内側の余白をそれぞれ1pxに指定
      }
      
      
      borderプロパティ{
        箱の境界線の幅や色を変更できます。
        注意したいのが、箱の幅、高さと、「border」「padding」「margin」を併用する場合です。
        この場合、幅や高さの値に加え、「border」「padding」「margin」で
        指定した値もプラスされます。
        なので、例えばwidth: 500px; と padding: 20px; のように指定した場合、
        幅は500px+左右のpaddingの合計40pxが増え、540pxとなります。
      }
      
      
      font-familyプロパティ{
        ワードなどで使用しているフォントを指定することができます。
        ただし、自分のPCにしか入ってないフォントを指定しても、他のユーザーは見ることができません。
        指定できるフォントには種類があり、
        サンセリフ体sans-serif、セリフ体serif、等幅フォントmonospace、装飾体fantasy、
        手書き体cursiveの5種類があります。
      }
      
      
      
      font-sizeプロパティ{
        文字の大きさを指定するには、font-sizeプロパティを使用します。
        単位はpx,em,%の３種類を主に使います。
        指定方法	意味
        px　　　	ピクセル単位での大きさ指定。
        em　　　	1文字分を表している単位です。フォントサイズを指定しなければ
                ブラウザの初期設定の16px分の大きさになります。
        %　　　　１文字分のサイズを％で指定できます。16pxで100%であれば100%は16pxとなります。
      }
      
      
      list-styleプロパティ{
        リストのスタイルを変更することができます。
        li要素の箇条書きのマークを変更したりすることができます。
      }
      
      
      line-heightプロパティ{
        行間の高さを指定することができるプロパティです。
      }
      
      
      text-alignプロパティ{
        文字の開始位置を指定するときに使用します。
        開始位置の指定はleft(左から)/center(中央)/right(右)の３つがあります。
      }
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-13T02:40:23.490Z"
updatedAt: "2018-02-25T10:00:22.675Z"
