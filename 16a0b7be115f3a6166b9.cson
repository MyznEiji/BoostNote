type: "SNIPPET_NOTE"
folder: "c7de755d4eba19dc5c05"
title: "GitFlow"
description: "GitFlow"
snippets: [
  {
    name: "GitFlow.cs"
    mode: "C#"
    content: '''
      
      //プロジェクトをgitで管理する
      1 : GitHubリポジトリを作成
        GitHub上でMyProfileでRepositoriesでNewを押し、
        Repository nameを入力してCreate repositoryをクリックする
      
      2 : terminalでリモートリポジトリを登録
          リモートリポジトリ作成後の画面2つ目のブロック[or Push an Existing...]
          の[git remote add origin url]をコピーして、terminalでローカルリポジトリ
          に登録する。
          そのあとにプッシュするときは[git push -u origin master]を入力
          -uをつけることで次回以降origin masterにプッシュするときにgit pushでできる
      
      3 : git initでファイルの.gitのローカルリポジトリを作成
      
      4 : gitのエイリアスを設定
          git config --global alias.ci commit
          git config --global alias.st status
          git config --global alias.br branch
          git config --global alias.co checkout
          
          --globalをつけないとprojectだけのエイリアスの設定
      
      
      
      
      //プッシュするまでの流れ
      1 : git statusをしてステージとコミットを確認
      
      2 : git add . or git add fileNameでステージに追加して、
          git statusで確認して、git diffでも確認する。
          
      3 : git commit -vでコミットをする
          git statusで確認して、git diff --stagedでも確認する
          git log --oneline --decorateで確認もする
          
      4 : git push でリモートにプッシュ (git push リモート名前 ブランチ名前)
        
        
        
        
      
      //リモートの情報を取得したい場合
      "フェッチする場合"
      1 : git fetch remoteName
          remoteNameというリモートリポジトリから情報を取得する
          
      2 : git branch -a
          remotes/remoteName/masterがある事を確認
          
      3 : git checkout remotes/remoteName/master(branchName)
          ワークツリーの内容をを切り替える
          
      4 : cat faileName
          ファイル内容を表示する
          
      5 : git checkout master(branchName)
          git merge remoteName/master
          内容をリモートの方に反映をさせる
          
          
      "プルする場合"
      1 : git pull remoteName master(branchName)
          フェッチをしてマージを一気にやってくれる
          
          
      
      //ブランチを作成する
      1 : git branch branchName
          ブランチの作成
          
      2 : git branch
          ブランチができたか確認
          
      3 : git log --oneline --decorate
          どのブランチがどのコミットを指しているかをログで確認
      
      4 : git checkout branchName
          branchNameのブランチにHEAD(作業ブランチ)を移す
      
      4-1 : git statusをしてステージとコミットを確認
      
      4-2 : git add . or git add fileNameでステージに追加して、
          git statusで確認して、git diffでも確認する。
          
      4-3 : git commit -v -m "message" でコミットをする
          git statusで確認して、git diff --stagedでも確認する
          git log --oneline --decorateで確認もする
      
      
      5 : git checkout master
          作業が終わりコミットしたらマスターにブランチを移す
      
      6 : git branch
          ブランチを移動できたか確認する
          
      7 : git merge branchName
          マスターに作業内容をマージする
          
      8 : git log --oneline
          別のブランチでのコミットやマージコミットがあるかを確認する
          
      9 : git branch -d branchName
          ブランチを削除（masterにマージされてない変更が残っている場合削除しない）
          強制削除したいときは git branch -D branchName
          
          
          
          
      //プルリクエスト
      1 : masterブランチを最新に更新
          git pull origin master
          
      2 : ブランチを作成
          git checkout -b branchName
      
      3 : ファイルを変更
          
      4 : 変更をコミット
          git add .
          git commit -m "Message"
        
      5 : GitHubへプッシュ
          git push origin branchName
      
      6 : プルリクエストを送る
          GitHubページのリポジトリに行き、Compare & pull requestを押下。
          base : master , compare : branchNameでWriteのところに
          レビューお願いしますと記述してCreate pull requestを押下
      
      7 : コードレビュー
          上のタブのPull Requestを押下して、任意のリクエストを押下
          変更点があればFileChangedで変更したいスクリプトの行の+ボタンを押して
          指示する。そしてReview changesを押下しsubmit review を押下
          
          その後プルリクOKならFileChangedを押下し、なにも変更なしにReview Changesを
          押下してコメント欄にLGTMと記入してsubmit reviewを押下。
          
      8 : LGTMが出たらプルリクエストをマージ
          リモートのブランチも削除する
          ローカルのmasterブランチに移り、git pull origin masterを実行
          できたらgit log --oneline --graph --decorateで
          リモートとマスターが同じところにいるか確認する
      
      9 : 作業工程を見せる用途がなければブランチを削除 
          git branch -d branchName
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-11-07T08:52:14.338Z"
updatedAt: "2017-11-13T08:42:41.063Z"
