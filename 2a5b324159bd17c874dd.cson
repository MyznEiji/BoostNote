createdAt: "2018-01-12T08:57:32.357Z"
updatedAt: "2018-03-14T05:59:56.177Z"
type: "SNIPPET_NOTE"
folder: "f2a0c68525cd18b96288"
title: "RailsDevise"
description: "RailsDevise"
snippets: [
  {
    name: "railsDevise.rb"
    mode: "Ruby"
    content: '''
      #devise
      deviseは、ログイン機能を簡単に作成することができるGemです。
      ログイン機能をGem無しで実装するのは非常に大変です。しかし、
      このGemを使うことで比較的簡単に実装することができます。
      Gemのインストールに加えてdevise専用のコマンドを利用して設定ファイルを作成する必要があります
      "
      $ rails g devise:install
      "
      
      
      #rails g devise コマンド
      deviseで、ログイン機能をつける概念のモデルを作成する際に利用するコマンドです。
      モデルに加えて、ログイン機能のために必要なカラムが追加されるマイグレーションファイルなどが
      生成されます。
      
      
      #user_signed_in?
      deviseでログイン機能を実装すると、user_signed_in?というメソッドを使用することができます。
      これは、ユーザーがサインインしているかどうか検証するメソッドです。
      サインインしている場合にはtrueを返し、サインインしていない場合にはfalseを返します。
        <% if user_signed_in? %>
          # ユーザーがサインインしている場合に実行する処理
        <% end %>
      
      
      
      #current_user
      deviseでログイン機能を実装すると、current_userというヘルパーメソッドを
      使用することができます。これは、現在ログイン中のユーザーのレコードを、
      userクラスのインスタンスとして取得することができるメソッドです。
      
      
      # after_sign_out_path_forメソッド
      deviseでサインアウトしたあとのリダイレクト先を指定するメソッドとして
      after_sign_out_path_forがあります。このメソッドでは返り値にサインアウト後の
      リダイレクト先URLを指定します。deiviseのメソッドを上書きしている
      関係上resourceを引数に渡さなけらばならないので、resourceを引数に渡します。
      
        def after_sign_out_path_for(resource)
          '/users/sign_in' # サインアウト後のリダイレクト先URL
        end
      
      
      # authenticate_user!
      deviseをインストールすると、ログイン画面とサインアップ画面を自動で用意してくれます。
      authenticate_user!はdeviseをインストールすることで使えるメソッドです。
      ユーザーがログインしているかどうかを確認し、ログインしていない場合はログインページに
      リダイレクトします。通常、before_actionを合わせて使用します。
      before_actionのexceptやonlyオプションを組み合わせると特定のアクションを
      指定することもできます。
      
      
      # Flow
      1 gem 'devise'
      2 $ bundle install
      3 $ rails g devise:install
      4 $ rails g devise:views
      5 $ rails g devise user
      6 $ bundle exec rake db:migrate
      
      
      
      # devise_parameter_sanitizer
      devise_parameter_sanitizerメソッドを使うとdeviseで設定されている
      strong_parametersに対してパラメーターを追加することができます。
      
      devise_parameter_sanitizer.permit(追加したいメソッドの種類, 
          keys: [追加したいパラメーター名])
      
      devise_parameter_sanitizer.permit(追加したいメソッドの種類, 
          keys: [:パラメーター1, :パラメーター2,..])
      
      
      
      引数の値	         処理
      :sign_up	        新規登録時
      :sign_in	        ログイン時
      :account_update	  レコードの更新時
      
      
      # validation(検証)
      validationとは、入力フォームを通じてビューからサーバー側へパラメーターが送られてきた際、
      正常な値か検証することができる機能です。
      
      
      class User < ActiveRecord::Base
          validates :email, presence: true
      
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
