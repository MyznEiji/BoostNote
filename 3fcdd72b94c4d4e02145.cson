type: "SNIPPET_NOTE"
folder: "4d7e758b4f010b205cc7"
title: "C#Variable"
description: "C#Variable"
snippets: [
  {
    name: "C#Variable.cs"
    mode: "C#"
    content: '''
      //Variable
      
      //変数(ariable)
      データの格納する記憶場所。いうならば、データをいれておく箱。
      変数にはどんなデータを入れる変数を用意するのかを宣言する
      
      
      //初期化
      変数に初めて値を代入することいい、その値を初期値という。
      int x = 10;
      x = 10を初期化子と言う。
      
      
      //動的初期化
      int x;
      x = 10;
      
      
      //定数
      値を変更できない変数のことで、constキーワードをつける必要がある
      const int x = 10;
      定数は動的初期化はできない。
      
      
      //readonly
      読み取り専用（read only）の変数を定義できます。
      readonly 型 変数で定義できます。
      
      
      //readonlyとconstの違い
      
      const	                          readonly
      ・ローカル変数にも使える	        クラスのメンバーのみ
      ・常に静的変数と同じ扱い	        staticの有無を変えられる
      ・宣言時にのみ初期化可能	        コンストラクタ内で値を書き換え可能
      ・コンパイル結果はリテラルと同等	 コンパイル結果は変数と同等
      ・インスタンスをnewで生成する     newも可能
        ようなものには使えない	
      
      
      
      //値型
      データを直接アクセスする
      int x;
      x = 10;
      メモリ内のどこかにxのための領域が確保され、確保した領域に10が納められる。
      データ自体が値を保持するものを値型。
      
      
      //参照型
      データを間接アクセスする
      str = "abc";
      abcという文字列がメモリ内のどこかに作成され、そのメモリのアドレスが
      変数strに保持される
      
      ・"クラス"型
        ・"オブジェクト"型
        ・"文字列"型（"文字"型とは違う）
      ・"配列"型
      ・"デリゲート"型
      
      
      //is演算子とas演算子
      参照型のみを対象とした演算子。
      
      "is演算子"
      式 is データ型
      
      式は参照型でなくてはならない
      式が指定のデータ型であればtrueを返し、そうでなければfalseを返す
      ```
      	object o;
      	long l = 1;
      
        o = l;
        print(o is long);
        print(o is int);
      
        o = "abs";
        print(o is string);
      
      ```
      
      
      "as演算子"
      式 as データ型
      
      式が指定のデータ型に変換する
      式もデータ型も参照型でなくてはならない。
      失敗するとnullが返される.
        
      ```
      	long l = 100;
      	object o;
      	string s;
      
        o = l;
        s = o as string;
        print(o);
      ```
      
      
      
      //リテラル
      変数に対してリテラルという概念がある。リテラルは固定の値で一目瞭然の形をしてる。
      リテラルは型もある。
      リテラルを意図的に型を指定することができる。整数10の語尾にlと付ければ、int型だが
      long型にすることができる。
      このような文字を"サフィックス"(suffix 接尾語)と言う。
      10.0f
      
      //整数型サフィックス
      long : l
      unit : u
      ulong : ul
      
      
      
      //実数型サフィックス
      float : f
      double : d
      decimal : m
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-27T09:09:03.438Z"
updatedAt: "2017-10-27T09:09:32.863Z"
