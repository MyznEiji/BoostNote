createdAt: "2018-03-07T08:46:22.096Z"
updatedAt: "2018-03-07T09:42:01.453Z"
type: "SNIPPET_NOTE"
folder: "cc1259c329b67ab436bd"
title: "PhpClass"
description: "PhpClass"
snippets: [
  {
    name: "PhpClass.php"
    mode: "PHP"
    content: '''
      <? PHP
      <!-- new演算子 -->
      new演算子は、クラスからインスタンスを生成し、返り値(戻り値)として生成したインスタンスを
      返します。  
      
      class Review {
      
      }
      $review = new Review(); // Reviewクラスのインスタンスを生成
      
      
      
      <!-- 静的メソッド --> 
        class クラス名 {
          public static function メソッド名() {
            // 処理
          }
        }
      
       呼び出し
      呼び出しはクラス名に続けてメソッド名を書きます。引数は()の中にいれます。
      ここは普通のメソッドと同様です。
      
        クラス名::メソッド名()
      
      
      <!-- インスタンスメソッド -->
      
      <?php
      
      class クラス名 {
          public function メソッド名() {
            // 処理
          }
      }
      
      ?>
      
      呼び出し
      呼び出しはインスタンスに続けてメソッド名を書きます。引数は()の中にいれます。ここは普通のメソッドと同様です。
        インスタンス->メソッド名(引数)
      
      
      
      コンストラクタ
      <?php
      
        class クラス名 {
          public function __construct() {
            // 生成のときの処理
            echo "クラス名のインスタンスが生成されました\\n"; // 例
          }
        }
      
      ?>
      
      
      
      <?php
      
      class Introduction
      {
          public $name;         // nameプロパティを定義
          public $age = 20;       // ageプロパティを定義。初期値として20が代入されている。
      }
      
      $intro = new Introduction();
      $intro->name = "田中";           // nameプロパティに"田中"という値を代入
      echo $intro->name, PHP_EOL;       // 上の行でセットされた"田中"が出力される
      // 「田中」と出力
      echo $intro->age, PHP_EOL;       // プロパティ定義時にセットされた初期値20が出力される。
      //  「20」と出力
      
      
      
      
      //静的プロパティ
      クラス内外から使用できる変数です。プロパティがインスタンス固有の変数であるとすると、
      静的プロパティはインスタンスには依存せずクラス共通の変数です。
      静的プロパティへはクラス名に::(ダブルコロン)をつけてアクセスします。
      静的メソッド時と同様にstaticプロパティ**と呼ぶこともあります。
      また、インスタンスから静的プロパティにアクセスすることはできません。
      
      
        class クラス名 {
          public static プロパティ名
        }
      
      
      //$this
      $thisはクラス内で利用し、インスタンス自身を表します。
      インスタンス->プロパティ名とすればインスタンスにプロパティを定義することができます。
        
        
      //継承
      class 子クラス名 extends 親クラス名 {
      }
      
        
      ?>
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
