createdAt: "2018-05-02T09:46:36.126Z"
updatedAt: "2018-05-04T07:23:11.657Z"
type: "SNIPPET_NOTE"
folder: "5c21c34ed317a94d49a2"
title: "PythonCode"
description: "PythonCode"
snippets: [
  {
    name: "code.py"
    mode: "Python"
    content: '''
      import string
      import random
      
      from Crypto.Cipher import AES
      
      
      key = ''.join(
          random.choice(string.ascii_letters) for _ in range(AES.block_size))
      
      iv = ''.join(
          random.choice(string.ascii_letters) for _ in range(AES.block_size))
      
      
      plaintext = "ojfosjdflseljf;osjdl;vsdoij"
      # ivは初期ベクトル
      # ブロックごとに暗号化するの16文字の塊で暗号化する　
      cipher = AES.new(key, AES.MODE_CBC, iv)
      # 足りない文字数を整える
      padding_length = AES.block_size - len(plaintext) % AES.block_size　
      plaintext += chr(padding_length) * padding_length
      
      # 文字列を暗号化する　出力
      cipher_text = cipher.encrypt(plaintext)
      print(cipher_text)
      
      
      # 複合する
      cipher2 = AES.new(key, AES.MODE_CBC, iv)
      decrypted_text = cipher2.decrypt(cipher_text)
      print(decrypted_text)
      print(decrypted_text[-1])
      print(decrypted_text[:-decrypted_text[-1]])
      
      
      
      
      
      
      
      "ファイルを暗号、複合する"
      
      
      with open('/Users/miyazonoeiji/projects/python/udemy/siliconValleyStyle/code/plaintext', 'r') as f, open('/Users/miyazonoeiji/projects/python/udemy/siliconValleyStyle/code/enc.dat', 'wb') as e:
          plaintext = f.read()
          # ivは初期ベクトル
          # ブロックごとに暗号化するの16文字の塊で暗号化する　
          cipher = AES.new(key, AES.MODE_CBC, iv)
          # 足りない文字数を整える
          padding_length = AES.block_size - len(plaintext) % AES.block_size
          plaintext += chr(padding_length) * padding_length
      
          # 文字列を暗号化する　出力
          cipher_text = cipher.encrypt(plaintext)
          e.write(cipher_text)
      
      
      # 複合する
      with open('/Users/miyazonoeiji/projects/python/udemy/siliconValleyStyle/code/enc.dat', 'rb') as f:
          cipher2 = AES.new(key, AES.MODE_CBC, iv)
          decrypted_text = cipher2.decrypt(f.read())
          print(decrypted_text[:-decrypted_text[-1]].decode('utf-8'))
      
    '''
  }
  {
    name: "hash.py"
    mode: "Python"
    content: '''
      import base64
      import os
      import hashlib
      
      
      # passwordをハッシュ化する bytes()で変換する必要がある
      # print(hashlib.sha256(b'password').hexdigest())
      #
      # print(hashlib.sha256(b'test').hexdigest())
      # print(hashlib.sha256(b'test2').hexdigest())
      
      user_name = 'user1'
      user_pass = 'password'
      db = {}
      
      
      # ハッシュ化して、悪意のあるユーザーが複合しようとしてもできない
      def get_digest(password):
          password = bytes(password, 'utf-8')
          digest = hashlib.sha256(password).hexdigest()
          return digest
      
      
      db[user_name] = get_digest(user_pass)
      
      
      def is_login(user_name, password):
          return get_digest(password) == db[user_name]
      
      
      # 上がTrueになり下がFalseになる
      print(is_login(user_name, user_pass))
      print(is_login(user_name, 'test'))
      
      
      # ソルトを作成
      salt = base64.b64encode(os.urandom(32))
      
      # def get_digest(password):
      #     password = bytes(password, 'utf-8')
      #     digest = hashlib.sha256(salt + password).hexdigest()
      
            # digestを何回もhash化して何回目のhashなのかをわからなくする
      #     for _ in range(10000):
      #         digest = hashlib.sha256(bytes(digest, 'utf-8')).hexdigest()
      #         print(digest)
      #     print(digest)
      #     return digest
      
      
      # get_digestと同じ処理の関数
      digest = hashlib.pbkdf2_hmac(
          'sha256', bytes(user_pass, 'utf-8'), salt, 10000)
      
      db[user_name] = digest
      
      # db[user_name] = get_digest(user_pass)
      
      def is_login(user_name, password):
          digest = hashlib.pbkdf2_hmac(
              'sha256', bytes(password, 'utf-8'), salt, 10000)
          # return get_digest(password) == db[user_name]
          return digest == db[user_name]
      
      print(is_login(user_name, user_pass))
      
    '''
  }
]
tags: [
  "hashlib"
  "sha256"
  "pbkdf2_hmac"
]
isStarred: false
isTrashed: false
