type: "SNIPPET_NOTE"
folder: "4d7e758b4f010b205cc7"
title: "C#Exception"
description: "C#Exception"
snippets: [
  {
    name: "C#Exception.cs"
    mode: "C#"
    content: '''
      //例外
      プログラムの実行中に発生する予期しないエラー
      例外が発生すると、その例外を表す例外オブジェクトが自動的に作成され、
      プログラムが送られる。(例外がスルーされる)
        
      関数定義側：例外が発生する可能性のあるところにthrow文を挿入することで、
                例外が起こったことを知らせることができます。
      "throw 例外クラスのインスタンス"
      "throw new system.ArgumentNullException;"
        
        
      関数利用側：つまり投げられてきた例外を処理する側です。ここでは、
      try-catchという構文を使うことで例外を処理することができます。
       
      try
      {
        例外が投げられる可能性のあるコード
      }
      catch(例外の種類)
      {
        例外処理コード
      }
      
      例外が起こりそうな文を"tryブロック"に記述する
      例外が発生した場合に実行される"catchブロック"
      try 
      {
        //試してみるコード1
        //試してみるコード2
        //試してみるコード3  
      }
      
      catch
      {
        /*例外が発生したらこの部分が実行されます
          プログラムは強制終了されません。
          catchブロックが終了してもtryブロックには戻りません*/
      }
      試してみるコード2で例外が発生すると、試してみるコード3は実行されずに
      catchブロックにジャンプする
      
      
      //System.ArgumentOutOfRangeException.Message
      Messageとすることで例外のメッセージを取得する
      
      
      
      //finally節
      try-catch構文では、例外を処理したcatchブロック以降のコードは実行されません。
      しかし、例外発生の有無にかかわらず実行したいコードがある場合があります。
      ```
      try{
          ....
      }
      catch(型 変数){
          ....
      }
      finally{
          ....
      }
      ```
      
      
      //独自の例外を作成する
      ExceptionクラスまたはApplication Exceptionクラスから派生させます。
      他の例外クラスから派生させることもできますが、派生禁止にしているクラスもあるので
      注意が必要です。自分で派生させたクラスのメンバをオーバーライドしたら
      独自例外クラスの完成です。
      
      
      
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-27T09:17:50.245Z"
updatedAt: "2017-11-06T17:06:08.611Z"
