createdAt: "2018-07-12T07:50:22.247Z"
updatedAt: "2018-07-23T10:53:46.275Z"
type: "SNIPPET_NOTE"
folder: "f17d0e91573b688dc1fb"
title: "Vue-Directive"
description: "Vue-Directive"
snippets: [
  {
    name: "directive.js"
    mode: "JavaScript"
    content: '''
      # v-once
      要素とコンポーネントを一度だけ描画します。その後再描画は、
      要素 / コンポーネントと全てのその子は、静的コンテンツとして扱われスキップされます。
      これは、更新性能を最適化するために使用することができます。
      <h1 v-once>{{ title  }}</h1>
      
      
      
      # v-bind
      1つ以上の属性またはコンポーネントのプロパティと式を動的に束縛します。
      
      class または style 属性と束縛する場合、配列やオブジェクトのような追加の
      値タイプをサポートします。詳細は下記にリンクしたガイドセクションを参照してください。
      <p><a v-bind:href="link">Google</p>
      <p><a :href="link"></a></p>と省略できる
      
      
      
      # v-html
      要素の innerHTML を更新します。コンテンツはプレーンな HTML として挿入されることに
      注意してください。Vue テンプレートとしてコンパイルされません
      
      <p v-html="finishedLink"></p>
      
      
      # v-on
      要素にイベントリスナをアタッチします。イベント種別は引数で示されます。
      式はメソッド名またはインラインステートメントのいずれかを指定することができ、
      または修飾子 (modifier) が存在するときは、単純に省略されます。
      
      ネイティブな DOM イベントを購読しているとき、
      メソッドはネイティブなイベントを引数としてだけ受信します。
      インラインステートメントで使用する場合、ステートメントでは特別な $event プロパティに 
      v-on:click="handle('ok', $event)" のようにしてアクセスすることができます。
      @click="changeLink"と省略もできる
      
      <!-- メソッドハンドラ -->
      <button v-on:click="doThis"></button>
      
      <!-- インラインステートメント -->
      <button v-on:click="doThat('hello', $event)"></button>
      
      
      
      # v-model
      v-model が指定されたとき、カスタムコンポーネントがプロパティおよびイベントを
      カスタマイズすることを許可します。デフォルトでは、コンポーネントにおける v-model は、 
      value をプロパティとして、 input をイベントして用います。しかし、
      チェックボックスやラジオボタンなどの入力タイプは、value 
      プロパティを他の目的で利用したいことがあるかもしれません。その際、 
      model オプションを利用することで、競合を避けることが可能です。
      
      <my-checkbox v-model="foo" value="some value"></my-checkbox>
      
      
      
      
      # v-if
      文字列テンプレートでは、例えば Handlebars の例は、このような条件ブロックを記述します:
      
      <!-- Handlebars の例 -->
      {{#if ok}}
        <h1>Yes</h1>
      {{/if}}
      Vue.js では、同じことを達成するために、v-if ディレクティブを使用します:
      
      <h1 v-if="ok">Yes</h1>
      これは、v-else で “else ブロック” を追加することも可能です:
      
      <h1 v-if="ok">Yes</h1>
      <h1 v-else>No</h1>
       
       
       
       
      # v-else-if
      New in 2.1.0+
      
      The v-else-if, as the name suggests, serves as an “else if block” for v-if. It can also be chained multiple times:
      
      <div v-if="type === 'A'">
        A
      </div>
      <div v-else-if="type === 'B'">
        B
      </div>
      <div v-else-if="type === 'C'">
        C
      </div>
      <div v-else>
        Not A/B/C
      </div>
       
       
       
      # v-for
         <ul>
            <li v-for="(ingredient, i) in ingredients">{{ingredient}} {{ i  }}</li>
         </ul>
      
      
      # v-for(dictionary)
      
      <li v-for="person in persons">
        <div v-for="(value, key, index) in person">{{key}} : {{value}} ({{index}})</div>
      </li>
      
      
      
      # v-for(number of list)
      <span v-for="n in 10">{{n}} </span>
      
      
      
      # クリックして配列に追加
      <button @click="ingredients.push('spices')">Add New</button>
      
    '''
  }
]
tags: [
  "v-once"
  "v-bind"
  "v-html"
  "v-on"
  "v-model"
  "v-if"
  "v-else"
]
isStarred: false
isTrashed: false
