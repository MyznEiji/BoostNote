type: "SNIPPET_NOTE"
folder: "4d7e758b4f010b205cc7"
title: "C#BasicClass"
description: "C#BasicClass"
snippets: [
  {
    name: "C#BasicClass.cs"
    mode: "C#"
    content: '''
      //BasicClass
      
      //クラス
      オブジェクトの性質や動作を規定するDNA(遺伝子、設計図)
        
        
      //オブジェクト
      クラスを具体化して物理的な実体となったもの
      
      
      //インスタンス
      クラスを鋳型(金属をとかしてそれに流しこむもの)として作られたオブジェクト
      オブジェクト = インスタンスとしても差し支えない。
      
      
      //メンバ
      メソッドのようなクラスの構成要素のこと。
      メソッドのように昨日を記述するもの(コード)と、データを記述するものの２つに大別される
      そのうち後者は(クラス変数 = インスタンス変数)
      アクセス修飾子 データ型 変数名;
      
      
      
      //アクセス修飾子
      修飾子を省略するとprivateとみなされる
      "private"
        クラスのみからアクセスできるインスタンス変数
      "public"
        どこからでも無制限にアクセスできるインスタンス変数
        
        
        
      //new演算子
      オブジェクトを生成するために宣言する
      クラスを定義してもオブジェクトは生成されません。
      
      MyCat m; //変数mを宣言したが、オブジェクトはまだ存在していない
      m = new MyCat(); //MyCatオブジェクトの生成
      
      
      //ドット演算子
      インスタンス.メンバ
      メンバにアクセスを可能にする
      
      ```
      MyClass a,b;
      a = new MyClass();
      a.x = 10;
      b = a; //bとaは同じオブジェクトを参照
      
      Console.WriteLine("b.x = {0}",b.x);
      b.x = 100; //参照元が同じな為、a.xも100に変わる。
      Console.WriteLine("a.x = {0}",a.x);
      
      
      //メソッド
      クラスの機能を規定します
      アクセス修飾子 復帰型 メソッド名(パラメータリスト)
      {
        メソッドの中身
      }
      ```
      
      "復帰型"
      メソッドが返すデータの型
      データを返さない場合はvoidを指定して、メソッドの返すデータはreturn文で書く
      
      
      "パラメーターリスト"
      パラメータとはメソッドの呼び出し時にメソッドに渡す変数のリスト
      引数と呼ばれることもある
      publc int MyMthod(int a, int b)
      {
        return x;
      }
      
      //インスタンスメソッド
      インスタンス名.メソッド名(パラメータリスト);
      クラス名ではなくインスタンス名を指定する。
      インスタンスを生成しないと呼び出せないメソッドを"インスタンスメソッド"
        
        
      //データの隠蔽
      データを他から見えないよにうして保護することをデータの隠蔽(カプセル化)
      オブジェクト指向プログラミング(Object Oriented Programming　OOP)の
      ３本柱のひとつ
      
      
      //コンストラクタ
      オブジェクトが生成された時に呼び出されるメソッド
      インスタンス変数の初期値を設定したり、その他の初期設定をするのに使う
      すべてクラスは必ずコンストラクタという一種のメソッドを持っている。
      
      
      "特徴"
      ・戻り値はない
      ・クラスと同じ名前を持つ
      ・必ずpublic
      ・パラメータを持つことができる。
      ・オーバーロードも可能
      ・オブジェクトが生成される時に自動的に呼び出される。
      
      ```
      class MyClass 
      {
        int x;
        
        public void ShowX()
        {
          Consoe.WriteLine("x = " + x);
        }
        
        //コンストラクタ:クラスと同じ名前、復帰型なし
        public MyClass()
        {
          x = 10;
          Console.WriteLine("xに10を代入しました");
        }
      }
      
      class Construct01
      {
        public static void Main()
        {
          //newした時にコンストラクタが呼び出される
          MyClass mc = new MyClass();
          mc.ShowX();
        }
      }
      
      「コンソール」
      xに10を代入しました。
      x = 10
      
      ```
      
      
      
      //デフォルトコンストラクタ
      コンストラクタ自分で書かなかった場合のみ引数を取らないコンストラクタが
      自動的に作られるコンストラクタのこと
      コンストラクタを書くとデフォルトコンストラクタは呼び出されない
      
      
      
      //オーバーロード
      異なるパラメーターリストの同名のメソッドを複数定義すること
      パラメータリストの違いから呼び出すメソッドを判断しています。
      シグネチャが違うもののみ可能なメソッド
      ```
      Class MyClass
      {
        private string name;
        private int age;
        private string address;
        
        public MyClass(string str)
        {
          name = str;
          address = "不定";
          age = "不定";
        }
        
        public MyClass(int x)
        {
          age = x;
          name = "不定";
          address = "不定";
        }
        
        public MyClass(string str1,string str2,int x)
        {
          name = str1;
          address = str2;
          age = x;
        }
      }
      
      
      Class Construct01
      {
        public static void Main()
        {
          MyClass mc1 = new MyClass(18);
          MyClass mc2 = new MyClass("たなかたろう");
          MyClass mc3 = new MyClass("鈴木次郎","埼玉県","32");
        }
      }
      
      ```
      
      
      //シグネチャ
      メソッドの名前とパラメータリストの組み合わせ。
      
      
      
      //デストラクタ
      ガベージコレクションが行われる直前に自動的に実行されるメソッド
      定義しないと自動的にデフォルトデストラクトが呼び出される
      "特徴"
      ・名前はクラス名の頭に~(チルダ)をつけたもの
      ・パラメータリストはない(オーバーロードもない)
      ・戻り値はない
      
      ```
      ~DestructTest()
      {
        //ガベージコレクションが行われる直前に実行される
        Console.WriteLine("デストラクタが呼ばれました");
      }
      ```
      
      
      //new 演算子
      メモリの空き領域にオブジェクトのために領域を確保する働きをする。
      
      
      //ガベージコレクション
      不要になったオブジェクトが占めているメモリ領域は自動的に解放する
      メモリ内に散在しているオブジェクトのうち、使われていないものを解放して、
      新しいオブジェクトのためのメモリ領域を確保する
      
      
      //this
      thisというキーワードは、作成するインスタンス自身を格納する特別な変数です。
      this.nameはPersonクラス内で定義されたnameのことになります。一方、
      thisがついていないnameはコンストラクタの引数のnameにあたります。
      静的メソッドでは使用できない
      
    '''
  }
]
tags: [
  "ガベージコレクション"
  "デストラクト"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-27T09:15:26.184Z"
updatedAt: "2018-01-25T09:54:19.521Z"
