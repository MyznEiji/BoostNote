type: "SNIPPET_NOTE"
folder: "4d7e758b4f010b205cc7"
title: "C#SOLID_SRP"
description: "C#SOLID_SRP"
snippets: [
  {
    name: "C#SOLID_SRP.cs"
    mode: "C#"
    content: '''
      //単一責任原則
      単一責任原則とはソフトウェアの設計をより良くするための基本的な思想です。
      
      
      //クラスを変更する理由は常に1つでなければならない
      
      クラスを変更する理由が2つ以上あるということは、責任（役割）も
      2つ以上あるということになります。役割を複数もっているクラスがある場合、
      以下のような障害がでます。
      
      ・1つの処理を修正しようとして他の役割に影響が生じる可能性がある
      ・複数人が同じクラスを編集してエラーが発生する可能性がある
      
      クラスを変更する理由は常に1つでなければならない
      1つのクラスが担当する仕事(=責務)は常に1つでなければならない
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-11-04T07:49:27.498Z"
updatedAt: "2018-01-26T07:41:08.200Z"
