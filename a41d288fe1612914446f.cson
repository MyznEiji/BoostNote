type: "SNIPPET_NOTE"
folder: "5c21c34ed317a94d49a2"
title: "PythonLibrary"
description: "PythonLibrary"
snippets: [
  {
    name: "PythonLibrary.py"
    mode: "Python"
    content: '''
      #ライブラリ
      ライブラリーとは一言でいうと、プログラムで書かれた便利でよく使われる処理の集まりです。
      プログラムに何かの処理をさせたい時に自分で0からコードを書いて実現せず、
      既に誰かが書いたコードを利用するという手段がプログラミングではよく用いられます。
      
      import ライブラリー名 as 変数名
      Pythonでライブラリーを使用する時はimport(インポート)メソッドを使用します。  
      
      
      
      
      
      
      
      
      #NumPy
      NumPy(ナムパイまたはナンパイ)は、数値計算を効率的に行うためのライブラリです。
      行列を操作するために必要となります。
      柔軟な配列操作を可能にします。pandasライブラリの他、pythonの主要なライブラリと連携しており、
      組み合わせて使うことが非常に多くなります。NumPyでは具体的には下記のようなことができます。
      import numpy as npとすることでnumpyをnpで扱うことができる
      
      -ある行、列だけを抽出する（インデックスで指定）
      -条件に合うデータだけ抽出する（条件式で指定）
      -欠損値を置き換える
      -欠損値を含む行または列を削除する
      -配列を連結する（行方向、列方向）
      
      
      #logical_and関数
      logical_and()メソッドは第一引数と第二引数が両方Trueの時にTrueを返すNumPyのメソッド。
      複数の条件でのアンド検索を行いたい時に使用される。
      
      
      
      #scikit-learn
      scikit-learn(サイキットラーン)は、機械学習に特化したライブラリです。教師あり、
      なしで用いられる様々な分類、回帰、クラスタリングアルゴリズムを直ぐに利用できる様に
      準備している他、機械学習の為のデータなども用意されています。
      
      
      
      #DataFrame()メソッド
      呼び出し元のオブジェクトを元にテーブルを作成します。テーブルとはExcelのように行と列が
      ある表の事です。第一引数にテーブルの各セルの値、第二引数にカラムの内容を指定します。
      
      
      
      # カラム
      カラムとはExcelで言う「列」の事で、あるデータの項目名を指します。
      
      
      #plot関数
      plot関数は様々なグラフを作成するための関数です。kind=の箇所に、
      グラフの種類、y=, x=の箇所それぞれが縦軸と横軸に持ってくる特徴量を指定します。
      plot関数には様々なオプションがあります。
      
      
      
      # hist関数
      ヒストグラムを描画するためのmatplotlibライブラリの関数。
      データフレームのインスタンス.hist()という形で利用する
      
      
      
      
      
      #train_test_split関数
      
      データをトレーニングデータとテストデータに分割するための関数。test_sizeという引数で、
      テストデータをどの位の割合にするか決めることが出来きます。例えばtest_size=0.3とした場合の
      トレーニングデータとテストデータの割合は70%:30%という事です。
      
      
      
        
      #train_test_split
      データをトレインデータとテストデータに分割してくれます。test_sizeでテストデータの
      割合を指定することができます。
      
      
      #math
      ネイピア数などを扱うためのパッケージ
      import mathとすると導入できる
      
      
      #TensorFlow
      →Google製、ディープラーニング用、Googleでの使用実績
      
      
      #Chainer
      →Preffered Networks製、非常に短いコードで記述が可能
      
      
      #Caffe
      →カリフォルニア大学のBVLCが開発、開発コミュニティーが活発
      
      
      #scikit-learn
      →Google製 、機械学習全般を扱う、統計処理全般に強み
      
      
      #機械学習ライブラリの、GPU演算対応状況
      TensorFlow → 対応、GPU版あり 
      Chainer → 対応、ライブラリの導入が必要 
      Caffe → 対応、ライブラリの導入が必要
      scikit-learn → 非対応、シンプルさと多様なプラットフォームの動作を重視
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-21T11:47:28.156Z"
updatedAt: "2017-10-21T17:52:51.242Z"
