createdAt: "2018-06-27T06:25:20.149Z"
updatedAt: "2018-07-09T04:16:33.478Z"
type: "SNIPPET_NOTE"
folder: "65eddf1377d9280594ea"
title: "Docker_General"
description: "Docker_General"
snippets: [
  {
    name: "General.py"
    mode: "Python"
    content: '''
      # $ docker(dockerコマンド) run(サブコマンド) hello-world(イメージの設定)
      
      
      # $ docker run docker/whalesay cowsay Hello!
        docker run Dockerのイメージ 実行コマンド
        docker run ubuntu:latest /bin/echo 'Hello world'
        Ubuntuのイメージを元にDockerコンテナを作成/実行し,作成したコンテナ内で
        " Hello world "を表示する
      
        コンテナで呼び出すコマンドはcowsay Hello!
        イメージの後ろにコンテナが立ち上がった後にコマンドを実行することができる   
        createステータスとrunningステータスを同時に行う
      
      
      
      # $ docker images
        イメージの一覧を表示するサブコマンド
        -a : すべてのイメージを表示 
        --digests : ダイジェストを表示
        --no-trunc : 結果を全て表示
        -q : DockerイメージIDのみ表示
      
      
      # $ docker tag docker/whalesay my_whalesay:TAG_NAME
        イメージにタグ付けするコマンド
        "tag" = タグ付けするサブコマンド
        "docker/whalesay"=元となるイメージ名
        "my_walesay"=新しいイメージ名
        ":TAG_NAME"=tag名を指定できる。
      
      
      # $ docker inspect [option] コンテナ識別子またはイメージ識別子
        イメージの詳細情報を確認する
        $ docker inspect my_whalesay 
        イメージの詳細情報を表示するコマンド
        "inspect"=イメージの詳細情報を表示するサブコマンド
        "my_whalesay"=対象のイメージ名 or イメージID
      
        結果
        "ID" : イメージID
        "Created" : 作成日
        "DockerVersion" :  Dockerのバージョン
        "Author" : イメージの作成者
        "Architecture" : CPUのアーキテクチャ
          
          
        $ docker inspect --format="{{ .Os}}" ubuntu
        Osの部分だけを取得する
        $ docker inspect --format="{{ .Config.Image}}" ubuntu
        Configの中のImageを取得する
      
        
      # $ docker rmi docker/whalesay
        ローカルのイメージを削除するコマンド
        "rmi"=ローカル上のイメージを削除するサブコマンド
        "docker/shalesay"=削除対象はイメージ名 or イメージID
        "-f" =で強制削除する docker rmi -f docker/whalesay
      
      
      
      
      # $ docker build -t docker-whale .
      イメージをビルドするコマンド
      "build"=イメージをビルドするサブコマンド
      "-t, docker-whale"=タグ名の指定
      "."=ビルドコンテキストの指定(イメージを作成する際にアクセスできるファイルの範囲を示す)
        イメージビルド時にビルドコンテキストのファイルやディレクトリはまとめてdockerデーモンに
        送信される。大きなファイルが含まれる場合は送信に時間がかかる。
      
      "--no-cache"=DockerFileに変更がないと実行されないことがあり、
          新しくライブラリをインス トールしてるんだけど、
          apt-getが実行されない場合があるので、--no-cacheオプションをつける
          'docker build --no-cache -t docker-whale .'
          
          
      # nginxのコンテナを立ち上げるコマンド
        $ docker run --name test-nginx -d -p 8080:80 nginx 
        $ docker run --name <コンテナ名> -d \\
        -p <ホスト側のポート番号>:<コンテナ側のポート番号> \\
        <イメージ名>
      
        "--name"=起動するコンテナに名前をつけるオプション
        "-d"=デタッチモード、コンテナの実行をバックグラウンドで行う
        "-p"=コンテナのポートをコンテナ外に公開する設定、
        "<ホスト側のポート番号>"=ホストマシーンが外部に公開する番号
        "<コンテナ側のポート番号>"=コンテナにマッピングするポート番号
        "-dを指定しないと"=フォアグラウンドでサーバが起動してログが流れてくる
        "-v"=ボリューム
        "-rm"=コンテナが終了した時点で自動的にコンテナの削除も行う
      
      
      
      # ホストマシン上のディレクトリをコンテナにマウントする
        ホスト上のhtmlファイルはnginxコンテナで公開できるようにする
      
      
      # docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx
        nginxのコンテナを立ち上げるコマンド~バインドマウントを使用する~
        # $ docker run --name <コンテナ名> -d \\ 
        # -v <ホスト側のディレクトリ>:<コンテナ側のマウントポイント>:<オプション> \\
        # -p <ホスト側のポータ番号>:<コンテナ側のポート番号> \\
        # <イメージ名>
        "ro"=read_only
        # -v /Users/<ユーザー名>/docker-tutrial/html:/usr/share/nginx/html:ro
        macの場合の-vオプションの引数
      
      
      
      # $ docker cp <ホスト上のコピーしたいファイルのパス> \\
      #  <コンテナ名 or ID>:<コピー先のパス>
      ホストマシンのファイルをコンテナ内にコピーする場合
        
        
      
      # $ docker cp <コンテナ名 or ID>:<コンテナ上のコピーしたいファイルのパス> \\
      #  <コピー先のパス>
      コンテナ内のファイルをホストマシンにコピーする場合
      
      
      # $ docker create --name status-test -it alpine /bin/sh
      コンテナが作成されてスタートする前、コンテナの作成
      "alpine"=軽量なイメージ
      "-i"=コンテナの標準入力を取得して双方向に接続するもの
      "-t"=コンテナ内にttyを割り当てる
      "-it"コンテナでshellを実行してフォアグラウンドで実行状態にしたいときによく使われる
      
      
      # docker ps
        現在実行中のコンテナを確認する
        "-a" : 実行中じゃないコンテナも表示する
        "--before="" " : beforeで指定したコンテナん識別子より前に
                         起動されたコンテナのみ表示
        "-f" : 表示するコンテナのフィルタリングを行う
        "-format" : 表示フォーマットを指定する
        "-l" : 最後に起動されたコンテナのみ表示する
        "--no-trunc=false" : 情報を省略しないで表示する
        "-q" : コンテナIDのみ表示する
        "-s" : ファイルサイズを表示する
        "--since="" " sinceで指定したコンテナ識別子より後に起動されたコンテナのみ表示
      
      
      
      # $ docker pause container-identifier [container-identifier]
        起動しているコンテナで動いているプロセスを全て中断させる
        $ docker pause status-test
        status-testコンテナを一時中断する
      
      
      # $ docker unpause status-test
        一時中断しているプロセスを再開させる
        pauseしてるstatus-testコンテナをrunningにする
      
      
      
      # $ docker stop [option] container-identifier [container-identifier]
        $ docker stop status-test
        status-testのコンテナが終了した状態にする(exit)
        
        $ docker stop -t 2 docker-identifier
        docker-identirierを2病後に停止する
        
        "-t" : コンテナの停止時間を指定する
      
      
      # $ docker start [option] container-identifier [container-identifier]
        $ docker start staus-test
        staus-testのコンテナを起動する
      
        "-a" : 標準出力、標準エラー出力を開く
        "-i" : コンテナの標準入力を開く
        
      
      # $ docker attach
        稼働しているコンテナに接続する時に使う
        
        $ docker attach <コンテナ名 or コンテナID>
        コンテナのシェルに接続するコマンド
        exitする時にコンテナは終了する
      
      
      # $ docker exec [option] container-identifier Command [argument]
        $ docker exec -it <コンテナ名 or コンテナID> /bin/bash
        コンテナのシェルに接続するコマンド　
        exitをする時コンテナは起動させたまま
      
        "-d" : コマンドをバックグラウンドで実行する
        "-i" : コンテナの標準入力を開く
        "-t" : ttyを使う
        
      
      # $ docker commit <コンテナ名 or コンテナID> <イメージ名>:<タグ名>
      コンテナの状態をイメージして保存することができる
      何か操作したコンテナからイメージを作成した場合コンテナ内で行われた作業は
      どこにも明確な記録として残らなくなる
      docker historyで記録に残らない
      
      
      # $ docker run --link <コンテナ名 or コンテナID>:<リンク先コンテナの別名>
      コンテナ名、または別名(エイリアスでリンク先に通信できるようになる)
      
      
      # docker search [オプション　] 検索キーワード
        Docker Hubに公開されているイメージを検索する
        --automated : Automated Buildのみ表示
        --no-trunc : 結果をすべて表示する
        -s : お気に入りの数の指定
          
          
          
      # docker stats [コンテナ識別子]
        Docker上で動作するコンテナの稼働状態を確認する時に使う
        
        # docker stats apache nginx
        apacheとnginxの名前のコンテナの稼働状況を確認する
        
        "Mem Usage/Limit" : メモリ使用量 /　コンテナで使用できるメモリの制限値
        "Mem %" : メモリ使用率
        "NetI/O" : ネットワークI/O
          
          
          
      # docker restart [option] container-identifier [container-identifier]
        コンテナを再起動するときに使う
        
        $ docker restart -t 2 container-identifier
        container-identifierのコンテナを2秒後に再起動する
        
        "-t" : コンテナの再起動時間を指定する
          
          
          
      # docker rm [option] container-identifier [container-identifier]
        起動しているコンテナを削除するときはdocker rmコマンドを使う
        
        "-f" : 起動中のコンテナを強制的に削除する
        "-v" : 割り当てたボリュームを削除する
        
        $ docker rm container-identifier
        container-identifierのコンテナを削除する
        
        
        $ docker rm -f 'docker ps -a -q'
        一括削除
      
        
      # docker top nginx1
        稼働しているコンテナで実行されているプロセスを確認する
        
        
      # docker port nginx1
        稼働しているコンテナで実行されているプロセスが転送されているポートを確認する時に
        使う。
        
      # docker rename Name1 Name2
        コンテナの名前をName1からName2に変更する時に使う
        
      # docker cp Container-identifier:コンテナ内のFile-Path Host-Directory
        コンテナ内のファイルをホストにコピーする時に使う
        
        $ docker cp test:/etc/passwd /tmp/etc
        testという名前のコンテナ内の/etc/passwdファイルをホストの/tmp/etcにコピーする
        時に使う。
        
        
        
      # docker diff Container-identifier
        コンテナないでなんらかの操作を行ない、コンテナがイメージから生成された時からの
        差分を確認する時に使う。
        
      
      # docker version
        Dockerのバージョンを確認する
        
        
      # docker info
        Dcokerの詳細情報が表示される
        
        
      # docker commit [option] Container-identifier [Image-Name[:Tag-Name]]
        コンテナからイメージを作成する
      
        "-a" : 作成者を指定する
        "-m" : メッセージを指定する
        "-p" : コンテナを一時停止してコミットする
      
        $ docker commit -a "ASA SHIHO" nginx1 asashiho/webfront:1.0
        nginx1という名前のコンテナを, asashiho/webfrontという名前で
        タグ名を1.0に指定して、新しいイメージを作成する場合に使う
        
      
      # docker export Container-identifier
        動作しているコンテナのディレクトリ/ファイル群をまとめてtarファイルを作成する
        
        
      # docker import Fail-or-URL - [Image-Name[:Tag-Name]]
        LinuxのOSイメージのディレクトリ/ファイル群からDockerイメージを作成する
        
      
      # docker save [option] save-file-name [image-name]
        Dockerイメージをtarファイルに保存する
        
        
      # docker load [option]
        docker saveコマンドで保存したtarファイルからイメージを作成する
    '''
  }
]
tags: [
  "docker"
  "run"
  "images"
  "tag"
  "inspect"
  "rmi"
  "pull"
  "search"
]
isStarred: false
isTrashed: false
