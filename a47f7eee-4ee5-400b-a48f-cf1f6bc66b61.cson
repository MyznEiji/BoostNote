createdAt: "2018-06-27T06:25:20.149Z"
updatedAt: "2018-06-28T08:05:34.093Z"
type: "SNIPPET_NOTE"
folder: "65eddf1377d9280594ea"
title: "Docker_General"
description: "Docker_General"
snippets: [
  {
    name: "General.py"
    mode: "Python"
    content: '''
      # $ docker(dockerコマンド) run(サブコマンド) hello-world(イメージの設定)
      
      
      # $ docker run docker/whalesay cowsay Hello!
      コンテナで呼び出すコマンドはcowsay Hello!
      イメージの後ろにコンテナが立ち上がった後にコマンドを実行することができる   
      
      
      # $ docker images
      イメージの一覧を表示するサブコマンド
      
      
      # $ docker tag docker/whalesay my_whalesay:TAG_NAME
      イメージにタグ付けするコマンド
      "tag" = タグ付けするサブコマンド
      "docker/whalesay"=元となるイメージ名
      "my_walesay"=新しいイメージ名
      ":TAG_NAME"=tag名を指定できる。
      
      
      # $ docker inspect my_whalesay 
      イメージの詳細情報を表示するコマンド
      "inspect"=イメージの詳細情報を表示するサブコマンド
      "my_whalesay"=対象のイメージ名 or イメージID
      
      
      # $ docker rmi docker/whalesay
      ローカルのイメージを削除するコマンド
      "rmi"=ローカル上のイメージを削除するサブコマンド
      "docker/shalesay"=削除対象はイメージ名 or イメージID
      "-f" =で強制削除する docker rmi -f docker/whalesay
      
      
      # $ docker pull docker/whalesay
      docker hub上に存在するイメージを取得することができる　
      "pull"=イメージを取得するサブコマンド
      "docker/whalesay"=所得したイメージ
      
      
      # $ docker build -t docker-whale .
      イメージをビルドするコマンド
      "build"=イメージをビルドするサブコマンド
      "-t, docker-whale"=タグ名の指定
      "."=ビルドコンテキストの指定(イメージを作成する際にアクセスできるファイルの範囲を示す)
        イメージビルド時にビルドコンテキストのファイルやディレクトリはまとめてdockerデーモンに
        送信される。大きなファイルが含まれる場合は送信に時間がかかる。
      
      "--no-cache"=DockerFileに変更がないと実行されないことがあり、
          新しくライブラリをインス トールしてるんだけど、
          apt-getが実行されない場合があるので、--no-cacheオプションをつける
          'docker build --no-cache -t docker-whale .'
          
        
      
    '''
  }
]
tags: [
  "docker"
  "run"
  "images"
  "tag"
  "inspect"
  "rmi"
  "pull"
]
isStarred: false
isTrashed: false
