type: "SNIPPET_NOTE"
folder: "4d7e758b4f010b205cc7"
title: "C#Control"
description: "C#Control"
snippets: [
  {
    name: "C#Control.cs"
    mode: "C#"
    content: '''
      //Control
      
      //if文()
      条件式がtrueの場合に{}内の文1、文2....が実行され、偽のときは実行されません。
      括弧を省略可能
      ```
      if(条件式){
         文1;
         文2;
      }else{
         文3;
         文4;
      }
      ```
      
      
      //switch文()
      switchのあとの()内にある式を評価した値と等しい値を持つ
      "case文"の中の処理が行われます。
      "フォースルー"
      case1にbreakがなく、case1の処理が読まれるとそのままcase2も読んでしまうこと
      ```
        swich(式)
      {
        
        case 値1:
          文1;
          break;
        
        case 値2:
          文2;
          break;
        
        case 値3:
          文3;
          break;
        
        default:
          文n;
          break; 
      }
      ```
      
      
      //for文()
      初期化子は「var i = 0」の部分で、iが0から始まることを意味します。
      次に条件式は「i < 5」となっており、iが5未満である場合ずっと繰り返し処理がされます。
      1度for文内の処理が終わると、反復子が評価されます。
      ```
      for(var i = 0(初期化子); i < 5(条件式); i++(反復子)){
        print(i);
      }
      ```
      
      "無限ループ"
      初期化子、条件式、反復子の一部、または全部を省略すると無限ループとなる
      ループ脱出手段としてよく用いられるのはbreak文をつかう。
      ```
      int i = 0;
      for( ; ; )
      {
        print(i);
        i ++;
        if(i >= 5) break;
      }
      ```
      
      
      //for文のネスト()
      for文のループのなかに、さらにfor文を作りこともできます。これをfor文のネストと
      いいます。ネストをした場合、内側のループから回ります。内側のループが一周すると、
      外側の反復子が評価され再び内側のループがまわるという形になります。
      二次元配列の各要素にアクセスする場合によく用いられます。
      ```
      for(var i = 0; i < 10; i++){
        for(vat j = 0; j < 10; j++){
          print(array[i][j]);
        }
      }
      
      //a. i=0となる
      //a-1. i=0 かつ j=0 となる
      //a-2. array[0][0]が表示される
      //a-3. i=0 かつ j=1 となる
      //a-4. array[0][1]が表示される
      //a-5. 
      //.
      //.
      //.
      //a-n. array[0][9]が表示される
      //b. i=1となる
      //b-1. i=1 かつ j=0 となる
      //b-2. array[1][0]が表示される
      ```  
      
      
      
        
      //forearch文()
      反復処理では配列の要素に対して行うことが多いです。C#には配列のすべての要素に
      アクセスするための専用のforeach文という構文があります。
      ```
      foreach(変数 in 配列名){
        配列の要素に対する処理
      }
      ```
      
      
      //while文()
      継続条件がtrueの場合に{}内の処理が行われます。
      無限ループを作る際には、while(true)とします。
      break文で抜け出す
      ```
      while(継続条件){
        文1;
        文2;
        .....
      }
      ```
      
      
      //do-while文()
      条件式の真偽にかかわらず、最低1回は実行してほしい文がある場合はdo while文を
      用います。do-while文は while文と異なり、最低1回は文が実行されます。 つまり、
      while文は条件式の評価を行ってから中の文を実行するのに対して、
      do-while文は先に文を実行してから、条件式を評価します。
      ```
      do{
        文1;
        文2;
        .....
      }while(継続条件);
      ```
      ```
      void Update () {
          int i = 10;
      
          do{
              print(i);
          }while(i > 15);
      }
      ```
      
      
      
      //goto()
      goto文はプログラムの任意の位置に無条件で制御を移す命令文です。
      goto ラベル名;
      
      ラベル:
      上記のように設定するとラベルの位置にジャンプする。
      ```
      print(10);
      goto jump01;
      print(5);
      
      jump01:
         print(8);
         print(6);
      ```
      console
      10
      8
      6
      
      
      //break文()
      break文はこれまでにもでてきたとおり、ループ処理を抜け出すために用いることが
      多いです。
      ```
      while(true) // 条件式が常に true なので、永久ループになる。
      {
        // 何らかの処理
        break;
        // break よりも後の処理は実行されない。
      }
      // break 文が実行されると処理がここに移る。
      ```
      
      
      //contine文()
      continue文は以降の処理を行わず、ループのはじめにもどる命令です。
      ```
      while(true) // continue 文が実行されると条件式の判定から処理をやり直す。
      {
        // 何らかの処理
        continue;
        // continue よりも後ろの処理は実行されない。
      }
      ```
      
      
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-10-27T09:11:19.258Z"
updatedAt: "2017-10-27T09:11:31.061Z"
