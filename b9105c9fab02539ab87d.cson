createdAt: "2018-03-07T04:20:43.099Z"
updatedAt: "2018-03-26T15:53:38.821Z"
type: "SNIPPET_NOTE"
folder: "cc1259c329b67ab436bd"
title: "tmpl"
description: "tmpl"
snippets: [
  {
    name: "tmpl.php"
    mode: "PHP"
    content: '''
      <!--PHP_EOL -->
      PHP_EOLはPHPに標準定義されている定数で、改行を表しています。
      echo構文は改行を含まないので、自分で手動で改行コードを書く必要があります。
      
      echo "Hello World", PHP_EOL;
      
      
      <!--PHPタグ -->
      ファイルにPHPのプログラムを記述する場合は、PHPタグで囲む必要があります。
      開始タグ<?phpと閉じタグ?>の間に処理を書くことでPHPプログラムを
      読み込ませることが出来ます。ただし、閉じタグ?>については省略することができま
      
      <?php
      echo "Hello World", PHP_EOL;
      ?>
      
      
      <!--php -a -->
      php -aとは、ターミナルから直接、PHPのプログラムを動かすことができる機能です。
      ターミナルから「php -a」と入力すると起動します。php -aを起動したら、
      直接プログラムを入力してエンターキーを押すだけで実行してくれます。
      
      
      
      <!--mb_strlen()関数 -->
      mb_strlen()関数は文字列が利用できる関数で、文字列の文字の数を数えてくれます。
      関数を利用するには、以下のように関数の引数に値を渡すような形になります。
      
      echo mb_strlen("Hello World"); // 文字列の文字数を返す
      
      
      <!-- strval()関数 -->
      数値の関数です。()の中に変換したい数値を入れることで文字列に変換してくれます。
      echo strval(20);   
      
      
      
      <!-- var_dump()関数 -->
      var_dump()関数は()の中に文字列や数値を渡すことで、
      変数の型やその中身を出力することができます。echo構文は単に出力される値だけを見たい
      場合に使い、var_dump()関数は出力される値の型まで見たい場合に使います。また、
      echo構文は文字列のみしか出力することができません。
      
      
      <!-- 文字列の連結 -->
      文字列同士を連結させるには、文字列同士を.(ドット)で繋ぎます。数式と同じような書き方です。
      
      "Hello " . " World";
      
      
      <!-- 変数の宣言 -->
      変数は以下のように宣言します。=を挟んで右側においた値の返り値を、
      左側の変数の中に入れるイメージです。
      $変数名 = 格納する値
      
      
      
      <!-- 定数 -->
      定数は、基本的には変数と同じく値を格納する入れ物です。しかし変数とは違い、
      一度値を代入したら再代入することをしません。
      const VALUE = "Hello World";
      
      
      <!-- 変数展開 -->
      変数展開とは文字列の中に変数を含むと、その変数の中身を出力することができる仕組みです。
      
       変数展開をする場合は文字列を作るときに"(ダブルクォテーション)で囲む必要があります。
      '(シングルクォテーション)で囲んだ場合は変数展開が行われません。また、
      変数の前後に{}(中括弧)をいれましょう。{}(中括弧)をいれなくてもエラーは起きませんが、
      変数展開を行っていることを明示的にできるため可読性があがります
      
       echo "わたしの名前は{$name}です。";
      
      
      <!-- fgets(STDIN)関数-->
      fgets()関数はユーザーからターミナルへ入力できるようにするための関数です。
      ユーザーが入力した値を文字列としてプログラムに渡します。
      (返り値はユーザーが入力した値の文字列)
      ()に渡しているSTDINという定数はキーボードの入力を表しており、
      LinuxOSに標準搭載されている定数です。つまりfgets(STDIN)はユーザーがターミナルで
      入力できるようにし、入力されるデータはキーボードから行われるという意味合いになります。
      fgets(STDIN)関数が呼ばれるとターミナル画面は入力待ちの状態になります。
      そこでキーボードから値を入力してエンターを押すと、
      fgets(STDIN)は入力した文字をプログラムに返します。
      
      
      
      <!--trim()関数-->
      trim()関数は文字列の先頭または末尾に存在する空白を取り除いてくれます。
      trim()関数の引数に文字列を渡すことで、文字列から空白を取り除くことができます。
      
        echo trim($string) // 改行されない
      
      <!-- array -->
      $post = array();
      
      
      
      <!--intval()関数-->
      文字列に対してintval()関数を使うとその文字列を数値に変換することができます。
      数字以外の文字列は全て0に変換されるので注意してください。
      
       $number =intval($string);
      
      
      <!-- -->
      $a == $b	等しい	型の相互変換をした後で $a が $b に等しい時に TRUE。
      $a === $b	等しい	$a が $b に等しく、および同じ型である場合に TRUE 。
      
      
      <!--floor()関数 -->
      floor()関数は引数に渡した値の端数を切り捨てることができる関数です。
      
      
      
      <!-- print_r関数 -->
      今まで、文字や数値などを表示する際には echo文を使っていたと思います。しかし、配列型の値を表示する場合、
      echo文を使用するエラーが出てしまいます。配列型の値を出力する時、PHPではprint_r関数を使用します。
      
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
