type: "SNIPPET_NOTE"
folder: "8f41a1c53d82040dd608"
title: "Ruby"
description: "Ruby"
snippets: [
  {
    name: "RubyMethod.rb"
    mode: "Ruby"
    content: '''
      #lengthメソッド
      文字列が利用できるメソッドで、文字列の文字の数を数えてくれます
      
      #to_sメソッド
      数値オブジェクトのメソッドです。数値オブジェクトを文字列に変換してくれます
      
      #to_iメソッド
      文字列オブジェクトに対してto_iメソッドを使うとその文字列を数値オブジェクトに変換することができます。
      
      #getsメソッド
      getsメソッドはユーザーからターミナルへ入力できるようにするメソッドです。ユーザーが入力した値を文字列オブジェクトとしてプログラムに渡します。(返り値はユーザーが入力した値の文字列オブジェクト)
      getsメソッドが呼ばれるとターミナル画面は入力待ちの状態になります。
      
      #chompメソッド
      chompメソッドは文字列の末尾の改行文字を取り除いた新しい文字列を返してくれるメソッドです。
      
      #<<メソッド
      生成した配列オブジェクトに新しい要素を追加したいときがあります。そのときは<<メソッドを使って、以下のように追加ができます
      "配列オブジェクト << 追加する要素"
      
      
      #eachメソッド
      配列オブジェクトに対してeachメソッドを実行すると、配列に含まれる要素を順に取り出して繰り返し処理が行われます。すなわち、配列の要素の数だけ処理が行われます。
      eachメソッドの使い方は以下のように配列オブジェクトに使います。
      " 
      配列オブジェクト.each do |変数|
          # 処理
      end
      "
      
      eachメソッドと with_indexメソッドを併用すると、要素の数だけブロックを繰り返し実行し、
      繰り返しごとに | で囲われている部分の i に番号が入ります。デフォルトでは、
      iには0から入ります。今回は with_index(1)と引数を渡した事で、1から番号が入りました。
      
      @ranking.each.with_index(1) do |product, i|
      
      
      #newメソッド
      全てのクラスは、定義しなくてもnewという特別なメソッドを持っています。
      このメソッドは、返り値として利用したクラスのインスタンスを返します。
      
      
      # initializeメソッド
      initializeメソッドは、インスタンスが生成された瞬間に、今まさに生成されたそのインスタンスに必ず利用されるインスタンスメソッドです。
      
      class クラス名
        def initialize
          # 生成のときの処理
          puts "クラス名のインスタンスが生成されました" # 例
        end
      end
      
      インスタンス = クラス名.new # initializeメソッドが呼ばれ
      "クラス名のインスタンスが生成されました"と表示される
      
      
      
      #unless文
      ここまで条件分岐にはif文を使用してきましたが、似た制御構造を持つものとしてunless文があります。
      unless文は条件式が偽(false)の場合の処理を記述するのに使われます。
      今回はユーザーがログインしていない場合の条件分岐にunless文を使用してみましょう。
      以下は最も基本的なunless文の書き方です。
      
      
      # mergeメソッド
      mergeメソッドは2つのハッシュを統合する時に使うメソッドです。
      
      
      # odd?
      レシーバが奇数かどうかを判定してtrueかfalseを返してくれるインスタンスメソッドです。
      
      
      # self
      インスタンスメソッドの中でselfと書くと、そのメソッドを利用したレシーバ自身が
      代入された変数のように扱うことができます。
      selfは実は省略することが可能です
    '''
  }
  {
    name: "General.rb"
    mode: "Ruby"
    content: '''
      #演算子
      +(足し算)
      -(引き算)
      * (かけ算)
      /(割り算)
      %(剰余)
      
      
      
      #比較演算子
      (>, <, ==) =と、==とでは意味が全く異なります。
      (>=, <=) >,<のあとに=を続けることで〜以上、〜以下を表すことができます
      
      
      
      #not演算子(!)
      !(エクスクラメーションマーク)はnot演算子と呼ばれ、否定の意味で使われます。
      !と=を合わせた!=は==と反対で、値同士が等しくない場合にtrueを返します。
      
      
      
      #バックスラッシュ記法
      「option + ￥」でバックスラッシュを打つことが出来ます。
      \\n	改行
      \\t	タブ
      \\b	バックスペース
      \\\\	バックスラッシュ
      
      
      
      #式展開
      Rubyの2章でも学習しましたがここでもう一度おさらいしましょう。文字列の中で式を使い、式によって得られる値を入れることのできる機能です。式展開の書き方は文字列中で#{式}とするだけです。
      
      
      
      #ハッシュオブジェクト
      ハッシュオブジェクト(略称:ハッシュ)は１つの変数で複数のデータを持つことのできるオブジェクトです。
      ハッシュオブジェクトは、自身の中にデータとそれに対応するキーのセットを所持することができます。
      hash = {}
      
      
      
      # キーバリューストア
      ハッシュのように、保存したいデータ(バリュー)とそれに対応する標識(キー)を対応させてペアで保存する方式のことをキーバリューストアといいます。
      
      
      
      #シンボルオブジェクト
      シンボルオブジェクト(略称:シンボル)とは今回のハッシュのキーのような名前を識別するためのラベルです。
      基本的に先頭に接頭語:をつけます。基本的には文字列と同じように扱えます。
      
      
      
      # if文
      条件分岐にはif(イフ)文という文法をつかいます。if文は条件式が正しいか正しくないかで処理を分岐させることができます。
      "
      if 条件式1 then
        # 条件式1が真(true)のときに実行する処理
      elsif 条件式2 then
        # 条件式1が偽(false)のとき、かつ
        # 条件式2が真(true)のときに実行する処理
      else
        # 条件式1と条件式2がどちらとも偽(false)のときに実行する処理
      end
      "
      
      
      #後置if
      最後のendを省略してif文を処理の後方に配置する書き方です。
      elsif, elseにあたる条件分岐が無く、かつ処理が一行で完結する場合に用います。
      "
      tweet.destroy if tweet.user_id == current_user.id
      "
      
      #while文
      while（ホワイル）文は繰り返し処理を行う文法の１つです。whileは以下のような文法で繰り返し処理を行います。
        
      プログラムを終了させず同じ処理をずっと繰り返すループ処理を行う方法はwhile文の条件式をtrueにしておくことです。これでwhileが繰り返すための条件が常に真となり、永遠にwhile内の処理が繰り返されます。
      "
        while true do
          # プログラムは終了せず繰り返し処理が行われる
          ## 処理
        end
      "
      しかしこれでは無限ループとなり、処理が終わることがありません。このループの処理から抜けるためにはexitメソッドを呼び出します。
      #exitメソッド
      exit(エクジット)メソッドはプログラムの処理を強制的に終了させるメソッドです。言うならば、実行中のプログラムを強制終了するコマンド「control + c」と同じ役割を持つメソッドです。
      "
        while true do
          exit  # ここでプログラムが終わる
          puts "Hello World" # これは呼ばれない
        end
      " 
        
        
      #アルゴリズム
      アルゴリズムはコンピュータである目的を達成するための処理の手順のことです。
      ここでは「1から10までを順に足し合わせてその都度表示する」が目的、もしくは解となりこれを達成するためにどのようにプログラムを組んだらいいか考えることがアルゴリズムを考えることになります。
      
        
        
      #自己代入演算子
      自己代入とは、その名の通り自分自身に代入するということです。自己代入演算子は、通常の演算子を用いた書き方に直すことができます。
      +=	number += 1	numberに1足した値をnumber自身に代入
      -=	number -= 2	numberから2引いた値をnumber自身に代入
      *=	number *= 3	numberに3かけた値をnumber自身に代入
      /=	number /= 4	numberを4で割った値をnumber自身に代入
        
       
        
      #配列オブジェクト
      配列オブジェクトはハッシュと同じように、1つの変数でたくさんの情報を持つことのできるオブジェクトです。配列の中にはたくさんのオブジェクトを入れることができます。ハッシュがキーでオブジェクトを管理していたのに対して、配列は順番でオブジェクトを管理します。データと順番がひもづけられます。
      "配列オブジェクト = []  "
        
        
      
      #要素
      配列の中のデータは要素と呼ばれます。
      
      
      
      #return
      全てのメソッドには返り値があると、前章で紹介しました。メソッド内でreturn ◯◯とすると、return(リターン)のあとに続けた式がそのメソッド自体の返り値になります。returnを利用した時点で返り値が決まるため、メソッドはその行までで強制的に終了します
      
      
      
      #スコープ
      ある変数を利用できる範囲のことです。スコープの範囲外の変数を使おうとすると、エラーが起こります。
      
      
      #クラスとインスタンスについてのまとめ
      ・Rubyでは、すべてのデータがオブジェクトとして扱われ、オブジェクトごとに性質や使えるメソッドを持つ
      ・オブジェクトを効率的に生成・管理するために、クラスとインスタンスという概念が存在する
      ・オブジェクト同士の共通の属性・メソッドをまとめて定義したものがクラスである
      ・クラスに基いて生成されたオブジェクトがインスタンス
      ・実際にプログラムを書くときでは、必ずクラスを定義して、そのクラスに基いてインスタンスを生成するという順番でオブジェクトを生成する。
      
      
      #クラスメソッド
      クラスが使用できるメソッドです。クラスメソッドを定義したクラス自身が使用できます。クラスで共通の情報を使った処理に使用します。
      - 定義
      クラスメソッドの定義の仕方はいくつかありますが、すべてクラスの定義内で行います。クラスメソッドはメソッド名の前にself.を付けます。
      "  
      class クラス名
        def self.メソッド名
          # 処理
        end
      end
      "
      
      - 呼び出し
      呼び出しは、クラス名に続けてメソッド名を書きます。引数は()の中にいれます。ここは普通のメソッドと同様です。
      "
      クラス名.メソッド名(引数)
      "
      
      
      
      #インスタンスメソッド
      インスタンスが使用できるメソッドです。インスタンスメソッドを定義したクラスのインスタンスに使用できます。インスタンスごとの個別の情報（属性値）を使った処理に使用します。
      - 定義
      
      インスタンスメソッドの定義はそのインスタンスのクラスの定義内で行います。普通のメソッドと書き方は同じです。
      "
      class クラス名
        def メソッド名
          # 処理
        end
      end
      "
      - 呼び出し
      
      呼び出しは、インスタンスに続けてメソッド名を書きます。引数は()の中にいれます。ここは普通のメソッドと同様です。
      "
      インスタンス.メソッド名(引数)
      "
      
      
      #クラスメソッドとインスタンスメソッドの違い
      クラスメソッドは、インスタンスの親玉であるクラス自身が利用する技です。
      例えば、レビューの総数ならば、これは個々のレビューではなくレビュークラスが扱うべき情報です。
      また、先ほどの項で出てきたnewメソッドも実はクラスメソッドです。newメソッドは「インスタンスを生成する」という振る舞いですが、こちらも個々のレビューではなくクラスが行うべきことでしょう。
      
      インスタンスメソッドは、各インスタンスが行う技です。例えば「レビューの内容を表示する」メソッドは、各レビューのインスタンスの属性値を使用するので、インスタンスメソッドとして定義するのがふさわしいでしょう。
      
      クラスメソッドは、クラスに対して使用し、クラスで共通の情報を使用します。つまり、インスタンスの個別の情報は関係ありません。
      インスタンスメソッドは、インスタンスに対して使用し、インスタンスごとに異なる個別の情報を使用します。
      
      特徴:インスタンスメソッド	- クラスメソッド
      定義方法:メソッド名の前にselfはつけない - メソッド名の前にselfをつける
      用途:インスタンスごとの属性を用いる場合 - 属性は関係のない共通の処理
      呼び出せるオブジェクト:クラスのインスタンス - クラス自身
      
      
      
      # クラス変数
      クラス全体で使用できる変数です。クラス内であればどこでも使えるのでクラスメソッド、インスタンスメソッドの両方で使うことが出来ます。クラスを通して、値が共通の情報に使用します。
      -定義
      クラス変数は、クラスの範囲内であればどこからでも参照できる変数です。
      クラス変数の定義はクラスの定義内で行います。クラス変数は変数名の始めに@@(アットマーク2つ)をつけて宣言します。
      "
      class クラス名
        @@クラス変数
      end
      "
      
      #インスタンス変数
      共通の属性としてインスタンスに定義できる変数です。その値は、個々のインスタンスによって別々に設定できます。
      レビュー管理アプリケーションで使用される情報を、クラス変数・インスタンス変数に分けると以下のようになります。
      -定義
      インスタンス変数の定義はインスタンスメソッドの定義内で行います。インスタンス変数は変数名の始めに@(アットマークを1つ)をつけて宣言します
      "
      class クラス名
        def sample
          @test = "ex"
        end
      end
      "
      
      
      #クラス変数とインスタンス変数の違い
      特徴:クラス変数 - インスタンス変数
      変数名:最初に@@(アットマーク2つ) - 最初に@(アットマーク1つ)
      使えるメソッド:クラスメソッドとインスタンスメソッド - インスタンスメソッド
      値:クラスとインスタンスで共通 - インスタンスごとに異なる
      
      
      
      # クラスの継承
      あるクラスに定義されたメソッドを、別のクラスで利用出来るようにすることを継承と言います。
      クラスの継承には、親クラスと子クラスの関係があります。元となるクラスを親クラス、親クラスのメソッドを引き継ぎ新しく作成するクラスを子クラス と呼びます。
      継承をする際には、クラスを宣言する際に「<」を用いて、以下のように記述します。
      "
      class 子クラス名 < 親クラス名
      "
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-13T02:40:09.521Z"
updatedAt: "2018-03-05T14:05:11.913Z"
