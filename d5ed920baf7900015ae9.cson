type: "SNIPPET_NOTE"
folder: "4d7e758b4f010b205cc7"
title: "C#DataType"
description: "C#DataType"
snippets: [
  {
    name: "C#DataType.cs"
    mode: "C#"
    content: '''
      //DataType
      
      //組み込み型
      intやstring型はC#があらかじめ用意している組み込み型というデータ型
      
      //ユーザー定義型
      ユーザーが自由に定義した型をユーザー定義型
      
      
      
      //C#の値型
      ビット長はメモリないに占有する領域の大きさ
      "8ビットが１バイト"なので、それぞれ1,2,4,8バイト
      範囲はビット長乗で知ることができる。
      "符号なし: 0　から　(2^ビット長 - 1)"
      "符号あり:(-2^(ビット長-1))　から　(2^(ビット長-1) -1) "
      
      {
        数値型
        {
          整数型
          {
            "sbyte"
            {
              範囲 : -128 ~ 127
              ビット長 : 8ビット
            }
            
            "byte"
            {
              範囲 : 0 ~ 255
              ビット長 : 8ビット
              符号なし
            }
            
            "short"
            {
              範囲 : -32768 ~ 32767
              ビット長 : 16ビット
            }
            
            "ushort"
            {
              範囲 : 0 ~ 65535
              ビット長 : 16ビット
              符号なし
            }
            
            "int"
            {
              範囲 : -2147483648 ~ 2147483647
              ビット長 : 32ビット
            }
            
            "unit"
            {
              範囲 : 0 ~ 4294967295 
              ビット長 : 32ビット
              符号なし
            }      
            "long"
            {
              範囲 : -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
              ビット長 : 64ビット
            }
      
            "ulong"
            {
              範囲 : 0 ~ 18,446,744,073,709,551,615
              ビット長 :64ビット
              符号なし
            }
          }
          
          実数型
          {
          
            浮動小数点型
            {
              "float"
              {
                範囲 :-3.402823E+38 ~ 3.402823E+38
                ビット長 :32ビット
              }
              
              "double"
              {
                範囲 : -1.79769313486232E+308 ~ -1.79769313486232E+308
                ビット長 :64ビット
              }
            }
            
            10進数データ型
            {
              "decimal"
              {
                範囲 : -79228162514264337593543950335 ~
                        79228162514264337593543950335
                ビット長 : 128ビット
              }
            }
          }
        }
        
        文字列型
        {
          "char"
          {
            範囲 :
            ビット長 :16ビット
            Unicode文字型
          }
        }
        
        論理型
        {
          "bool"
          {
            範囲 :
            ビット長 :      
          }
        }
      }
      
      
      
      //浮動小数点数型
      浮動小数手数のビット長については、簡単に言えば精度を表すと思ってください
      そもそもPCは小数点が嫌いで、10進数では0.1はすっきりと0.1ですが、
      "2進数の世界では正確に0.1を表すことができないから、0.1に限りなく使い数を"
      "0.1にしている。"
      
      
      
      //論理型
      その値に対してtrueとfalseのいずれかしか取らない
      
      
      //暗黙の型指定
      varキーワードを用いて暗黙の型指定ができる
      コンパイラが右辺の内容から単純に式を推論することで行われるから、
      "変数の初期化時のみ使用できる"
      
      
      //dynamic型
      dynamicが指定された変数はコンパイル時には型が決定されない。
      型は実行時に決まる。主にCOMやDおMhえのアクセスを用意するために付け加えられた機能
      "varとは異なり動的初期化時に使用できる"
      dynamic z;
      z = 1.25;
      
      
      
      //Console.WriteLine("sbyte: {0} ~ {1}",sbyte.MinValue,sbyte.MaxValue);
      sbyteの範囲を出力
      
      
      //型変換/型キャスト
      型の小さなものから大きなものへの代入では暗黙のうちに型変換が行われる。
      しかし、基本的に大きな型から小さな型への代入はできません。
      この時に型変換を行うために、変換したい型をカッコで括ります
      ```
      long a = 2;
      byte b;
      b = (byte)2;
      ```
      
      
      //列挙型
      特別なデータ型でenumキーワードを使う
      ```
      enum 列挙名:型{列挙子のリスト}
      ```
      列挙子の型はchar型以外の任意の整数型を指定できる
      通常はint型でその場合特に型に指定しません。
      ```
      enum Cat{
        pochi,Tama,Mike
      };
      ```
      この場合
      Cat.Pochiは０
      Cat.Tamaは１
      Cat.Mikeは２
      
      "(int)Cat.Pochiとすると0が出力される"
      
      
      
      //オブジェクト型
      objectで表される。
      この型はなんでも代入できる
      ```
      int a = 0;
      object b;
      b = a; //なんでも代入できるのでOK
      ```
      Object型の変数に値型の変数を代入することを"ボックス化"と言う。
      Object型の変数に格納した値を値型の変数に代入することを"ボックス化解除"といい、
      型キャストを使う必要がある。
      
      Object型の変数はメモリのどこかに領域を確保しています。そして、
      これに値型のデータを代入するとします。その値が直接Object型の変数に保存されるわけ
      ではないのです。データの実態は"マネージヒープ領域"と呼ばれるメモリ領域に存在し、
      その参照がObject型の変数に格納される。
      
      ```
      object o;
      int i,a = 100;
      
      o = a; //ボックス化
      i = (int)o; //ボックス化解除
      Console.WriteLine("i={0}",o};
      ```
      
      
      //文字列型
      stringで扱うことができる
      
      
      //null許容型
      Null許容型はNullと値を持てる型である
      値型の型名の後ろに ? を付ける事で、元の型の値または 
      null の値を取れる型になるというものです。
      int? x = null;
      print(x.Value);
      "Valueプロパティ"
      有効な値を返します。 もし、値が nullだった場合、 
      例外 InvalidOperationException 投げます。
      
    '''
  }
]
tags: [
  "null許容型"
]
isStarred: false
isTrashed: false
createdAt: "2017-10-27T09:10:18.489Z"
updatedAt: "2018-01-25T07:56:33.980Z"
