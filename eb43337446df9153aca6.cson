type: "SNIPPET_NOTE"
folder: "c7de755d4eba19dc5c05"
title: "Command"
description: '''
  Command
  
'''
snippets: [
  {
    name: "GitBasicCommand.cs"
    mode: "C#"
    content: '''
      
      ディレクトリを移動します。
      
      lsコマンド
      ディレクトリの内容を表示します。 ls -a コマンドで、
      隠しファイルを含めたディレクトリ全内容を表示します。
      
      mkdirコマンド
      ディレクトリを新規作成します。
      
      rmコマンド
      ファイルを削除します。
      
      cpコマンド
      ファイルをコピーします。
      
      mvコマンド
      ファイルの移動とファイル名の変更を行います。
      
      catコマンド
      ファイルの中身を表示します。
    '''
  }
  {
    name: "GitCommand.cs"
    mode: "C#"
    content: '''
      //git clone リポジトリURL ディレクトリ名
      git clone コマンドは、外部のサーバーにあるGitで管理されたソースコードを
      自分のパソコン（ローカル環境）にダウンロードするコマンドです。
      実際に使用する際にはgit clone リポジトリURL ディレクトリ名という形で
      ターミナルで実行し使用します。
      ```
        $ git clone リポジトリURL ディレクトリ名
        # ソースコードをクローン
      ```
      
      
      
      //git init
      
      //ls -a
      .フォルダ名→隠れフォルダ
      
      //ls .git
      
      
      
      //git config --global user.name "githubのUserName"
      githubのUser情報を登録する
      確認コマンド→git config user.name
      
      //git config --global user.email github@example.com
      githubのemail情報を登録する
      確認コマンド→git config user.email
      
      //git config --global core.editor "atom --wait"
      githubのeditorを登録する
      確認コマンド→git config core.editor
      
      //git config --list
      Gitの登録情報全て表示される
      
      //cat ~/.gitconfig
      
      
      
      //git add .
      ワークツリーの変更全てをステージに追加
      
      //git add <fail or directory>
      failかdirectoryを指定してステージに追加
      
      //git commit
      なんのファイルを変更したのか確認
      
      //git commit -m "<Message>"
      メッセージ付きで変更を記録する
      
      //git commit -v
      変更内容をgitエディター上で確認することができる
      
      
      //git status 
      （ワークツリーとステージ間、ステージとリポジトリ間）変更されたファイルを確認する
      
      
      //git diff　(differenceName)
      git addする前の変更差分をみる
      
      //git diff <failName>
      ファイルを指定してgit addする前の変更差分をみる
      
      //git diff --staged
      ステージしたけど、コミットしてない変更差分を見る
      
      
      //git log
      今までの変更履歴を確認する
      
      //git log --oneline
      変更履歴を一行だけ表示する
      
      //git log -p index.hitml
      特定のファイルの変更差分を表示する
      
      //git log -n <コミット数>
      表示するコミット数を制限する（最近の変更履歴だけを見たい時）
      
      //git rm <failName>　(removeの略)
      ファイルを削除する
      
      //git rm -r <directoryName>
      ディレクトリを削除する
      
      //git rm --cached <failName>
      ファイルはいるけどgitの記録から削除したい時
      (Passが乗ってるファイルをGitに上げてしまった時)
        
        
      //git mv <old fileName> <new fileName>
      ファイルの移動。ファイル名の変更。 
      以下の工程を一気に行なっている。
      1 mv <old fileName> <new fileName> 
      2 git rm <old fileName>
      3 git add <new fileName> 
      
      
      
      //git remote add origin https://github.com/user/repo.git(github's url)
      リモートリポジトリを新規追加する
      プッシュする前にやっておこう
      origin = gitでMainのリモートリポジトリのことをorignとつける。
      そういうものと覚えよう
      
      
      //git push <remoteName> <branchName>
      リモートリポジトリ(GitHub)へ送信。ローカルリポジトリの内容を
      リモートリポジトリに送る
      
      ex git push origin master
         git push -u origin master → -uオプションを付けておくと次回以降
         origin masterをPushする時にgit pushだけでPush出来るようになる。
                                     
      //git push <branchName> <tagName>
      タグをリモートリポジトリに送信する
      
      //git push origin --tags
      タグを一斉にに送信する
                                     
      //エイリアス
      別名という意味。コマンドの入力を省略して楽にする
      
      //git config
      設定を変更するコマンド。--globalを付けるとPC全体の設定を変更する
      --globalを付けないと今自分がいるproject下（特定のproject）のgit configの設定に反映される
      
      //git config --global alias.ci commit
      commitコマンドにciというエイリアスを割り当てている
      
      
      //git checkout -- <failName>
      特定のファイルの変更を取り消す
      
      //git checkout -- <directoryName>
      ディレクトリごと変更を取り消す
      
      //git checkout <branchName>
      ブランチを切り替える
      
      //git checkout -b <newBranchName>
      ブランチを新規作成して切り替える
      
      //git checkout -- .
      全変更を取り消す
      checkoutコマンドはブランチの変更を取り消すのにも使えるため、
      --を付ける事で名前の重複でどちらを指しているかわからなくなるのを避けている
      
      //git reset HEAD <fileName>
      特定のファイルのステージした変更を取り消す
      
      //git reset HEAD <directoryName>
      ディレクトリごとステージした変更を取り消す
      
      //git reset HEAD .
      ステージした全変更を取り消す
      変更をステージから取り消すだけなので、ワークツリー（自分のローカルファイル）の
      ファイルそのものには変更は取り消されない。
      もし、ワークツリーからも変更を取り消したい場合は
      git reset HEADコマンドをしてから、git checkoutコマンドをする必要がある
        
      //git remote
      設定してるリモートリポジトリ情報を表示する
      
      //git remote -v
      設定しているリモートリポジトリのURLを表示する
      
      //git fetch <remoteName>
      リモートからローカルに情報を取得する。ワークツリーには情報は反映されない
      
      //git pull <remoteName> <branchName>　    (merge型)
      リモートから情報を取得してマージまでやるコマンド
      git pull origin master = git pull(省略可能) 
      = git fetch origin master & git merge origin master
      
      
      //git pull　--rebase <remoteName> <branchName>     (rebase型)
      リモートから情報を取得してリベースする
      マージコミットが残らないから、GitHubの内容を取得したいだけの時は--rebaseを使う
      
      //git remote show <remoteName>
      リモートの詳細情報を表示
      
      //git remote rename <oldRemoteName> <newRemoteName>
      リモートの名前を変更
      
      //git rename rm <remoteName>
      リモートの削除
      
      //git branch <branchName>
      ブランチを新規追加する
      
      //git branch
      ブランチの一覧を表示する
       
      //git branch -a
      すべてのブランチを表示する
      リモートリポジトリも表示することができる
      
      
      //git log --oneline --decorate
      それぞれのブランチがどのコミットを指しているかを確認
      --oneline　一行で表示する　
      --decorate　どのブランチがどのコミットを指しているかを確認できる  
      
      
      //git merge <branchName>
      今いるbranchをmasterにマージする
      //git merge <remateName/branchName>
      マージする
      //git merge origin/master
      GitHubにあるMasterBranchをリモートにマージする。
      
      
      //git branch -m <branchName> (move)
      ブランチ名の変更
      
      //git branch -d <branchName> (delete)
      ブランチの削除
      masterにマージされてない変更が残ってる場合は削除しない
      
      //git branch -D <branchName>
      ブランチの強制削除
      
      //git rebase <branchName>
      リベースする
      
      //git config --global merge.ff false
      ファストフォワードをしないようにする
      
      //git config --global pull.rebase true
      --rebaseオプションをつけなくてもgit pullの挙動がリベース型になる
      
      //git config branch.master.rebase true
      masterブランチでgit pullするときだけgit pullに--rebaseオプションがつく
      
      
      //git commit --amend
      直前のコミットをやり直す
      ＊リモートリポジトリにプッシュしたコミットに関してはやり直してはいけない
        プッシュしてないコミットだけ。 
        
      
      //git rebase -i <commitID>　　　(iはinteractiveの略)
      "複数前のコミットをやり直す"
      GitHubにプッシュしてないコミットの履歴を整えたい時の書き換え
      1git rebase -i HEAD~3 　：直前３つのコミットのやり直しができる(対話的リベースモード)  
      2コミットエディターが立ち上がり
      ```
        pick gh21f6d ヘッダー修正
        pick 193054e ファイルの追加
        pick 84fha0d README修正
      ```
      と出力される
      3やり直したいcommitをeditにする。editのコミットのところでコミットの適用が止まる
      ```
        edit gh21f6d ヘッダー修正
        pick 193054e ファイルの追加
        pick 84fha0d README修正
      ```
      4やり直したら実行する　git commit --amend
      5次のコミットへ進む（リベース完了） git rebase --continue
      
      "コミットの並び替え、削除"
      1git rebase -i HEAD~3
      2コミットエディターが立ち上がり
      ```
        pick gh21f6d ヘッダー修正
        pick 193054e ファイルの追加
        pick 84fha0d README修正
      ```
      3 84fha0dのコミットを消し、193054eを先に適用する
      ```
        pick 193054e ファイルの追加
        pick gh21f6d ヘッダー修正
      ```
      
      "コミットをまとめる"
      1git rebase -i HEAD~3
      2コミットエディターが立ち上がり
      ```
        pick gh21f6d ヘッダー修正
        pick 193054e ファイルの追加
        pick 84fha0d README修正
      ```
      3コミットを１つにまとめる
      ```
        pick gh21f6d ヘッダー修正
        squash 193054e ファイルの追加
        squash 84fha0d README修正
      ```
      
      
      "コミットを分割する"
      1git rebase -i HEAD~3
      2コミットエディターが立ち上がり
      ```
        pick gh21f6d ヘッダー修正
        pick 193054e ファイルの追加
        pick 84fha0d README修正とindex修正
      ```
      3コミットを分割する
      ```
        pick gh21f6d ヘッダー修正
        pick 193054e ファイルの追加
        edit 84fha0d README修正とindex修正
      ```
      4git reset HEAD^
      5git add README
      6git commit -m 'README修正'
      7git add index.html
      8git commit -m 'index.html修正'
      9git rebase --continue
      
        
      //git tag
      タグの一覧を表示する
      
      //git tag -l "201705"
      201705のタグがついたものが表示される
      
      //git tag -a <tagName> -m <Message>
      注釈付きタグの作成
      
      //git tag <tagName>
      軽量版タグの作成
      
      //git tag <tagName> <commitName>
      後から昔のコミットにタグをつける
      
      //git show <tagName>
      タグのデータを表示する。
      タグ付けした人の情報、タグ付けした日時、注釈したメッセージ、コミットが表示される
      
      //git stash
      作業を一時避難する
      
      //git stash list 
      避難した作業を確認する
      
      //git stash apply
      避難した作業を復元する（ステージは復元されない）
      
      //git stash apply --index
      ステージの状況も復元する
      
      //git stash apply <stashName>
      特定の作業を復元したい場合
      git stash apply stash@{1}　一番最新のstashをstash@{0}
      
      //git stash drop
      最新の作業を削除する
      
      //git stash drop <stashName>
      特定の作業を削除する
      git stash drop stash@{1}
      
      //git stash clear
      全作業を削除する
      
      
    '''
  }
  {
    name: "GitReset.cs"
    mode: "C#"
    content: '''
      "ファイルの変更を取り消す"Editterと前回のコミットを比較
        
      //git checkout -- <failName>
      特定のファイルの変更を取り消す
      
      //git checkout -- <directoryName>
      ディレクトリごと変更を取り消す
      
      //git checkout -- .
      全変更を取り消す
      checkoutコマンドはブランチの変更を取り消すのにも使えるため、
      --を付ける事で名前の重複でどちらを指しているかわからなくなるのを避けている
      
      
      
      
      "ステージの変更を取り消す"
      //git reset HEAD <fileName>
      特定のファイルのステージした変更を取り消す
      
      //git reset HEAD <directoryName>
      ディレクトリごとステージした変更を取り消す
      
      //git reset HEAD .
      ステージした全変更を取り消す
      変更をステージから取り消すだけなので、ワークツリー（自分のローカルファイル）の
      ファイルそのものには変更は取り消されない。
      もし、ワークツリーからも変更を取り消したい場合は
      git reset HEADコマンドをしてから、git checkoutコマンドをする必要がある
        
      
      
      
      "直前のコミットを上書きする"
      
      //git commit --amend
      直前のコミットをやり直す
      ＊リモートリポジトリにプッシュしたコミットに関してはやり直してはいけない
        プッシュしてないコミットだけ。 
        
        
        
      "コミット位置を戻す"
      //git log --oneline --graph --decorateでハッシュ値を確認
      //git reset --hard ハッシュ値 or git reset --hard HEAD^
      
      --hardオプション：
        コミット取り消した上でワークディレクトリの内容も書き換えたい場合に使用。
      --softオプション：
        ワークディレクトリの内容はそのままでコミットだけを取り消したい場合に使用。
      
      HEAD^：
        直前のコミットを意味する。HEAD^^,HEAD^^^と2,3個前のコミットを意味する
      HEAD~{n} ：
        n個前のコミットを意味する。
        
        
        
      "間違えて--hardをやってしまったら"
      git reflog
      git reset --hard (hash)
      
      git reset --hard HARD@{num}で戻れる。
    '''
  }
  {
    name: "GitRemote.cs"
    mode: "C#"
    content: '''
      //リモートリポジトリは複数登録することができる
      プロジェクト開発とは別に自分でもリモートリポジトリを持っておきたいとき
      複数のチームで開発している場合など
      
      
      //git clone リポジトリURL ディレクトリ名
      git clone コマンドは、外部のサーバーにあるGitで管理されたソースコードを
      自分のパソコン（ローカル環境）にダウンロードするコマンドです。
      実際に使用する際にはgit clone リポジトリURL ディレクトリ名という形で
      ターミナルで実行し使用します。
      ```
        $ git clone リポジトリURL ディレクトリ名
        # ソースコードをクローン
      ```
      
      
      
      //git remote add origin https://github.com/user/repo.git(github's url)
      リモートリポジトリを新規追加する
      プッシュする前にやっておこう
      origin = gitでMainのリモートリポジトリのことをorignとつける。
      そういうものと覚えよう
      
      
      
      //git push <remoteName> <branchName>
      リモートリポジトリ(GitHub)へ送信。ローカルリポジトリの内容を
      リモートリポジトリに送る
      
      ex git push origin master
         git push -u origin master → -uオプションを付けておくと次回以降
         origin masterをPushする時にgit pushだけでPush出来るようになる。
      
      
      //git remote
      設定してるリモートリポジトリ情報を表示する
      
      
      //git remote -v
      設定しているリモートリポジトリのURLを表示する
    '''
  }
  {
    name: "GitBranch.cs"
    mode: "C#"
    content: '''
      //git branch -m <OldBranchName> <NewBranchName>
      ローカルブランチをリネームする場合
      
      
      //git branch -m <NewBranchName>
      今いるブランチをリネームする場合
      
      
      //git branch 
      ローカルのブランチを表示する
      
      //git branch -a
      リモートのブランチを表示する
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-03T03:44:29.090Z"
updatedAt: "2018-04-27T15:37:55.854Z"
