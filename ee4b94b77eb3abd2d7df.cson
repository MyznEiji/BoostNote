type: "SNIPPET_NOTE"
folder: "9fb83e79d395466828ff"
title: "LinuxCommand"
description: '''
  LinuxCommand
  
'''
snippets: [
  {
    name: "LinuxCommand.cs"
    mode: "C#"
    content: '''
      //exit
      テキストログインからログアウト
      
      //su
      rootパスワードを入力すると、rootユーザになる
      プロンプトが$から#に変わる
      
      //shutdown -h now
      シャットダウン
      shutdownコマンドに-hオプションをつけると電源断を意味する
      環境によっては「コマンドが見つかりません」とエラーが吐き出され、
      この時は/sbin/shutdown -h nowと入力する。
      なお、オプションの後ろには何分後にシャットダウンするかを指定できる
      shutdownコマンドはrootという管理者権限を持つスーパーユーザーしか実行できない。
      
      //shutdown -r now
      再起動
      shutdownコマンドに-rオプションをつけると再起動(Reboot)を意味する
      オプションの後ろには何分後にシャットダウンするかを指定できる
      
      
      //date
      現在の日時を表示する
      
      //echo
      コマンドの後ろに指定した文字列を表示することができる。
      
      //echo $SHELL
      ログインシェルの確認
      
      //sh
      shシェルの起動
      ログアウトはexit
      
      //bash
      bashの起動
      ログアウトはexit
      
      
      //touchコマンド
      空ファイルを作成する
    '''
  }
  {
    name: "lsCommand.cs"
    mode: "C#"
    content: '''
      //ls
      ファイルやディレクトリの一覧表示するためのコマンド
      複数のディレクトリを引数に実行も可能
      $ ls projects projects/atom (projectsとatomのファイルなどを一覧表示)
        
      //*
      任意の文字列
      $ls Un*
      と入力するとUnで始まるファイル一覧が表示される
      
      $ls *.html
      と入力すると拡張子が.htmlのファイルが一覧表示される
        
      //?
      任意の１文字
      $ls Unity-Pro?????
      Unity-Proという文字列を含んだ14文字のディレクトリ内のファイルを一覧表示される
      
      
      //ls -l
      ファイル名だけではなくファイル属性などの詳細情報を同時に表示する。
      
      //ls -a
      隠しファイル（ファイル名が.で始まるファイル）を含めて表示する
      
      //ls -F
      ファイル名の後ろにファイルの種類を表す記号を追加して表示する
      /  ディレクトリ
      *  実行可能ファイル
      @  シンボリックリンク
      無し　通常ファイル
      
      //ls -w
      指定した数値の横幅で表示するオプション
      $ ls -w 30
        
        
      //ls --quote
      ファイル名を"(ダブルクォート)で囲んで表示してるくれる
    '''
  }
  {
    name: "FileOperation.cs"
    mode: "C#"
    content: '''
      //mkdir [option] <directory>
      新しくディレクトリを作る
      既存のファイル名と同名のディレクトリを作ることはできません。
      
      //mkdir -p report/2014/01
      -pオプションで深いディレクトリを一気に作る
      (reportと2014と01ディレクトリを作成)
      
      
      //touch <NewFile1> <NewFile2> ...
      中身が何も書かれていない空っぽのファイルを作成する。
      本来touchコマンドはファイルのタイムスタンプ(日時)を更新するためのコマンドです。
      対象のファイルが存在しない場合には新しくファイルを作成する。
      
      
      //rm [option] <DeleteFile1> <DeleteFile2> ...
      ファイル/ディレクトリを削除する
      ex $ rm *.html　（拡張子.htmlのファイルをまとめて削除）
      
      
      //rm -r <directory>
      中のファイルごとディレクトリを削除する
      
      //rm -i <directory>
      ファイルを削除する際に本当に削除して良いか確認を求められる
      yまたはYを入力した後Enterを押すとファイルが削除される
      
      //rmdir <directory>
      空のディレクトリを削除する
      中にファイルがあるディレクトリを削除しようとしてもエラーとなるのがrmコマンドとの違い。
      
      //cat [option] <fileName>
      ファイルの内容を表示する
      catコマンドの引数にファイルを指定しない時にはキーボードから入力を待つようになる 
      Ctrl + dで抜け出す
      
      複数のファイルを指定するとファイルを連結して表示する
      $ cat /etc/hostname /etc/crontab
      
      //cat -n <fileName>
      -nオプションは行番号をつけて内容を表示する
      
      
      //less [option] <fileName>
      引数に指定したファイルの内容を１画面ごとに表示して、上下にスクロールすることができる。
      ファイル表示中に[/]を入力し、EnterKeyを押すと
      現在開いてるファイルから文字列を検索することができる
      nを押すたびに次の検索結果まで移動します。１つ前の検索結果に戻るにはNを推します
      
      
      //lessコマンドの操作
      spaceKey １画面下にスクロールする
      b        １画面上にスクロールする
      j        １行下にスクロールする
      k        １行上にスクロールする
      q        lessコマンドを終了する
      /<文字列>　下に向かって検索
      ?<文字列>　上に向かって検索
      n         次の検索結果に移動
      N         前の検索結果に移動
      
      
      
      //cp [option] <copy from> <copy to>
      ファイル/ディレクトリをコピーする
      パス名展開を使って、拡張子txtファイルをまとめてコピー
      $ cp *.txt backupdir
      
      コピー先に同じ名前がある場合はコピー元のファイルを同名のコピー先ファイルに上書きされる
      
      //cp -i <copyFrom> <copyTo>
      コピー先ファイルが存在する場合に本当に上書きして良いか確認する。
      
      
      //cp -r <directoryFrom> <directoryTo>
      ディレクトリーをコピーする
      directoryToが存在していなければ、directoryFromをdirectroyToという名前でコピーします
      一方、directoryToというディレクトリが既に存在している場合には、コピー先にディレクトリを指定
      したとみなされ、directoryFromをdirectoryToの中に名前を変えずにコピーします。
      
      
      //mv [option] <moveFrom> <moveTo>
      1<moveFrom>、<moveTo>の両方にファイル名を指定した場合ファイル名の変更しているのと同じことに
      なります。
      2<moveFrom>にファイル名、<moveTo>にディレクトリ名を指定した場合は<moveTo>の中に
      <moveFrom>を移動します。
      3<moveFrom>がディレクトリで<>場合にはcpコマンドと同じように複数のファイルを一度に移動します
      
      
      //ln [option] <linkFromFileName> <linkName>
      ファイルに別名をつける。（リンクを張る）
      
      リンクには[ハードリンク][シンボリックリンク]があり、
      ハードリンクは１つのファイルの実態に複数の名前を付ける機能
      １つの実態に複数のファイル名をつけるので、それらのファイル名全てがなくなった時に
      ファイルの実態も削除される
      
      -sオプションをつけるとシンボリックファイルを作成できる
      $ ln -s file1 file2
      シンボリックリンクとはリンク先のパス名が書かれた小さな特殊ファイル。
      リンク先がファイルの実態であり本物のファイル
      ハードリンクはディレクトリに対して作成できなかったり、異なるディスク間をまたがることができない
      などの制約があるが、シンボリックリンクにはこのような制限はない。
      
      シンボリックファイルを確認するには
      lsコマンドの-lオプションを指定する
      
      //シンボリックファイルの利用方法
      長いパス名を省略する。
      $ ln -s local/work/code/project/source source
      $ cd source 深いディレクトリにすぐに移動できる
      
    '''
  }
  {
    name: "Find,Search.cs"
    mode: "C#"
    content: '''
      //find <検索開始ディレクトリ> <検索条件> <アクション>
      ファイルを探す
      引数で指定した<検索開始ディレクトリ>を起点として、<検索条件>を満たすファイルを探し、
      <アクション>を実行します。
      検索条件に何も指定しなかった場合には、すべてのファイル、ディレクトリが対象となります。
      ex $find . -name file-1.txt -print
      検索条件として-name file-1.txtを指定しており、これでファイル名を絞り込み、
      アクションには-printを指定していて、パス名を表示するアクション。
      
      -nameはファイル名の大文字小文字を区別する。 -inameは大文字小文字を区別しない
      -nameで*や?を利用する際にはダブルクォートをつける。bashのパス名展開と解釈されてしまう。
      
      -typeと指定すると、ファイルの種別により検索条件を絞り込むことができる。
      1 -type f  通常ファイル
      2 -type d  ディレクトリ
      3 -type l  シンボリックリンク
      
      -aは検索条件を区切って並べることで、複数の検索条件を大事に指定する
      ex $find . -type f -a -name '*.txt' -print
      なお、-aは省略可能
      
      
      
      //locate [option] <serchPattern> 
      ファイルを検索する
      $ locate hash
      $ locate '*.sed'
      locateは事前にファイルパスのデータベースが作られており、データベースだけを検索するため、
      高速に動作する
      なのでたった今作成したばかりのファイルは、データベースに入っていない為locateコマンドで
      見つけることはできません。
      
      -iは大文字小文字を無視させたい時に使う
      -bはファイル名だけを検索対象にするときに、利用する
      -Aは複数の検索パターンを含むものを指定することができる
      $ locate -A bash doc　(bashとdocを含むものを検索)
      
      
      //--help
      このオプションを指定するとコマンド自身のヘルプメッセージを表示します
      $ cat --help
      
      
      // man <調べたいコマンド>
      スペースキーで下にスクロールし、上スクロールをb、一行上をk,一行下をj,qキーで終了
      
      man -k <キーワード>
      コマンド名はわからないけれど、このようなことをしたいというキーワードだけはわかる場合がある
      
      マニュアルのセクション番号(cat(1))
      
      1 コマンド 
      2 システムコール　
      3 ライブラリ関数
      4 デバイスファイル
      5 ファイルの書式
      6 ゲーム
      7 その他色々なもの
      8 システム管理コマンド
      9 カーネルルーチン
      
      //man <セクション番号> <名前>
      セクション番号を指定してマニュアルを表示する
      セクション番号を省略した場合複数のマニュアルのうちセクション番号が最も小さいものが表示されます。
      
      //man -wa crontab
      特手のマニュアルページがどのセクションに含まれているかを確認する。
      
      
      //コマンドを探す場所の確認
      $ echo $PATH
      この時表示される文字列は、コマンドを探すディレクトリを:で連結したものです。
      コマンドを探すディレクトリのことをサーチパスと呼びます
      
      
      //which [option] <commandName>
      シェルが実際にどのファイルを実行するかを見つかった最初のものを確認
      -aオプションを指定するとすべての実行ファイルの場所が確認できる
      
    '''
  }
  {
    name: "TextEditor.cs"
    mode: "C#"
    content: '''
      //vim
      最小限のキー操作で様々な編集操作が効率よくできるという特徴
      
      //vim --version
      vimコマンドのインストールの確認
      
      //yum install vim
      vimをインストール
      
      //vim
      vimの起動
      $ vim newfile1.txt
      ファイル名を指定してvimを起動
      
      //:q <Enter>
      vimの終了
      現在の編集内容を破壊してVimを終了したい場合:q!で終了する
      
      //:w
      ファイルを上書き保存する
      $ :w <fileName>
      名前をつけて保存をする。
      
      //カーソル移動
      kjhl　＝　上下左右
      x 文字を削除する
      i 文字を入力モード（インサートモード）に変更　おわったらEscキー（ノーマルモード）
      w 次の単語の先頭に移動する
      b 後ろの単語に移動
      0 行頭に移動する
      $ 行末に移動する
      gg 一行目に移動する
      G 最後の行に移動する
      <号番号>G 指定した行番号へカーソルを移動する
      
      
      //デリート
      d$ 行末までをデリート
      d0 行頭までをデリート
      x 一文字デリート
      dw 単語１つをデリート
      dgg 最初の行までをデリート
      dG 最後の行までをデリート
      
      
      //プット
      p デリートした文字列をpコマンドを利用して貼り付ける
      
      
      //ヤンク（ヤンク）
      yy  現在カーソルのある行をヤンク
      dd  現在カーソルのある行をデリート
      
      
      //下の行と連結する
      Jを押すと行を連結する
      
      //アンドゥ(元に戻す)とリドゥ（やり直し）
      u アンドゥ
      Ctrl + r　アンドゥを取り消す（リドゥ）
      
      //文字列を検索
      /<文字列>　下方向に向かって文字列を検索する
      ?<文字列>　上方向に向かって文字列を検索する
      n　次の検索結果に移動する
      N　前の検索結果に移動する
      
      
      // %s/<置換元文字列>/<置換後文字列>/g
      文字列の置換
      ex %s/day/pen/g
      dayをpenに置換する
      
      
      
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-10T11:38:28.944Z"
updatedAt: "2017-09-13T22:37:58.006Z"
