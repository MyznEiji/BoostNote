type: "SNIPPET_NOTE"
folder: "f2a0c68525cd18b96288"
title: "RailsGeneral"
description: "RailsGeneral"
snippets: [
  {
    name: "General.rb"
    mode: "Ruby"
    content: '''
      #Gem(ジェム)
      RailsはGemと呼ばれる便利なrubyライブラリをインストールして利用することで、
      より簡単にアプリケーション開発をすることができます。gemには開発を効率化してくれたり、
      会員登録サービスが簡単にできるなど便利なものがたくさんあります。
      Railsアプリケーションは全てをゼロから作るのではなくgemのライブラリも
      利用することでより効率的に開発することができます。
      gem 'Gem名'#ジェムの追加
      
      
      #DataBase
      データベースとはたくさんの情報(データ)が入っている箱のようなものです。
      この中には様々な種類のデータが存在していて、データを格納したり、取り出すことができます。
      Railsでは運用環境ごとにひとつのデータベースを持っています。
      
      rake db:create
      新しくデータベースを作成するには「rake db:create」というコマンドを実行します。
      このコマンドはdatabase.ymlというファイルの内容に基づいてデータベースを新規作成するという
      機能を持っています
      
      
      
      #運用環境
      開発を行う際に、運用環境と呼ばれるものを使い分けることで効率的に作業を行うことができます。
      運用環境には３つの種類があり、以下のような使い分けをします。
      
      運用環境      概要
      development  開発環境。通常、開発をする際に使用する環境。
      production   本番環境。アプリケーションを実際にリリースする際に使用する環境。
      test	       テスト環境。アプリケーションの動作をテストする際に使用する環境。
      Railsでは運用環境ごとにひとつのデータベースを持っています。
      ローカルでの開発では基本的にdevelopment環境と呼ばれる開発用の環境しか使用しません。
      そのため、利用するデータベースも開発環境用のみとなります。
      
      
      
      #database.yml(データベース・ヤムル)
      database.ymlにはデータベースの設定を記述します。
      Railsは開発環境ごとにデータベースを持つので、開発環境の分だけデータベースの設定が
      記述してあります。
      
      
      #RequestとResponse
      ユーザーがPCやスマートフォンを使ってウェブサイトにアクセスした時、
      PCからはリクエストというものが送信されます。それに対して、リクエストを受け取ったサーバーは
      リクエストに対して適切なレスポンスを返します。これが基本的なウェブサイトの仕組みになっています
      
      
      #Routing
      ルーティングには、送られてきたリクエストに対してどのコントローラのどのアクションを
      動かすのかを設定しておきます。
      
      
      #routes.rb
      Railsではルーティングをconfig/routes.rbに記述します。
      このファイルを編集していくことで、新しいルーティングを設定したり、
      ルーティングを削除したりすることが出来ます。
      URL →→localhost:3000/tweets
      localhost:3000の部分はホスト名と呼ばれる部分で環境によって変わるので今は気にしなくて
      大丈夫です。ここで重要なのはパスと呼ばれる/tweetsの部分です。
      ルーティングはパスに対応してどのコントローラのアクションを動かすかを設定します
      "tweets　　    #   index"
      controllerName    actionName
      
      
      #Controller
      コントローラはルーティングとビューをつなぐ役割を持っています。
      リクエストが送られてきた際にルーティングが読まれると、それに対応するコントローラが動きます。
      コントローラでの処理が終わると、そのコントローラから指定したビューが読みこまれます。
      このようにコントローラはルーティングからビューへと処理を受け渡す役割を持っています。
      
      
      #ControllerClass
      tweets_controller.rbの一番最初の行にTweetsControllerと記述してあるのに注目してください。
      これはコントローラにおけるクラスを示しています。
      コントローラクラスはコントローラのファイル名(tweets_controller.rb)から、
      単語の先頭を大文字にしてアンダーバーを取った名前(TweetsController)になります。
      Railsにおいて名前は重要な意味を持っているので、
      クラス名が違ったりすると正常に動かなくなります。
      
      
      #Action
      アクションとはコントローラに存在するインスタンスメソッドのことを指します。
      さきほどの編集でTweetsControllerクラスにindexというインスタンスメソッドを作成しました。
      つまりこれはindexというアクションを作成したことを意味します。
      コントローラは複数のアクションを持つことが可能なので、index以外のアクションを
      追加することが可能です。
      def index ← ActionName
      end
      
      
      
      #RoutingからViewまでのFlow
      1:Browser(URL)からリクエスト [localhost:3000/tweets]
      2:Routing [get 'tweets' => 'tweets/index']
      3:Controller [tweets_controller.rbへ行きTweetsControllerClassのindexActionへ]
      4:View [viewsFolder内にtweets_Controller.rbを作成時にtweetsFolderが作成され、
              その中にTweetsControllerClassで定義したActionのviewFileを作成する]
      
      #ViewFile
      以前にルーティング→コントローラ→アクション→ビューの順番に処理が進むことを説明しました。
      ビューファイルはウェブサイトにおける見た目の部分を担当していて、
      レスポンスとして返されるのがビューファイルのデータというわけです。
      ビューファイルの拡張子はhtml.erbです。
      
      
      #erb
      erbとは、現時点ではRubyのコードを書くことができるHTMLファイルという理解で問題ありません
      
      
      #LayoutFile
      app/views/layouts以下にあるファイルはレイアウトファイルと呼ばれるビューファイルです。
      レイアウトファイルは、それぞれのビューファイルが読み込まれる前に読み込まれます。
      つまり、このファイルにそれぞれのビューの共通部分(ヘッダーやフッターなど)を定義しておくことで、
      同じコードを省略することができます。
      
      
      #Table
      テーブルとは、表形式の収納場所です。
      RailsによるWebアプリケーション用のデータの保存場所としてのテーブルには、2つの特徴があります。
      1つめは、あるテーブル内レコードを特定するための値として、
      idというカラムが用意されることです。通常、idカラムには整数が入ります。
      2つめは、行列によって区切られた1マスに入る値は1つでないといけないことです。
      
      
      #レコードとColumn
      テーブルの横1行のことをレコード、縦1列のことをカラムと言います。
      
      
      #DOA
      データ中心アプローチ（Data Oriented Approach) という考え方です。
      これは、文字通りシステムを作る際に、プログラムよりも前にデータ設計から始める方法論です。
      DOAはサービス開発が効率的になるため近年主流になっています。
      
      
      #予約語
      MYSQL側で使用されるためテーブル名やカラム名に設定することができないよう決められている
      単語のことです。
      
      
      #ER図
      ER図とは、Entity-Relationship Diagramの略で
      テーブル同士の関係を視覚的にわかりやすく表した図です
      ER図は、IE表記法 という書き方で書きます
      
      
      #Model
      モデルとは、Railsの中でデータベースへのアクセスをはじめとする
      情報のやりとりに関する処理を担当しているパートで、
      実体は１つのクラスが定義された◯◯.rbというファイルです。
      コントローラでモデルを利用してテーブルからデータを引き出し、ビューに渡すことになります
      Railsからあるテーブルに保存された情報を引き出す際は、
      そのテーブルに対応するモデルクラスを用意します。
      対応関係は、テーブルとモデルクラスの名前によって決定します。
      
      モデルの命名規則
      Railsでは、ファイルやテーブルなどの命名を規則に従った形にする必要があります。
      モデルとテーブルに関する命名規則は以下のようになっており、
      これに従えばテーブルとモデルが結びつきます。
      種類                  概要        名前例
      モデルクラス名          先頭は大文字、単数形     Tweet
      モデルクラスのファイル名  先頭は小文字、単数形     tweet.rb
      テーブル名	             先頭は小文字、複数形     tweets
      
      
      #MigrationFile
      マイグレーションファイルは、テーブルの設計図です。
      マイグレーションファイルにどんなカラムを持つテーブルにするかを書き込み、
      実行することでテーブルが作成されます。
      
      
      
      #Columnの「型」
      カラム名を指定するとともに、そこにどんなデータが入るのかを示す
      「型」も指定する必要があります。以下に主な型の種類を紹介しておきます。
      型         説明          用例
      integer	   数字	         ユーザーのidなど
      string     文字(少なめ)   ユーザー名、パスワードなど
      text	     文字(多め)     投稿文など
      boolean	   真か偽か	      真偽フラグ
      datetime   日付と時刻	   作成日時、更新日時など
      
      
      
      #SchemaFile
      スキーマファイルは「rake db:migrate」を実行した際に更新が行われ、
      最新のマイグレーションファイルのバージョンが記録されます。
      先ほどの作業でtweetsテーブルを作成するためにマイグレーションを実行しました。
      つまり、スキーマファイルにはtweetsテーブルを作成する際に編集した
      マイグレーションファイルのバージョンが記録されていることになります。
      
      
      #schema_migrations
      schema_migrationsとはデータベースの変更履歴のようなもので、
      どのマイグレーションファイルまでが実行されているかが記録されていくテーブルです。
      マイグレーションファイルが実行された際に自動的に作成されます。
      
      
      #Sequel Pro
      Sequel Pro(シークエルプロ)は、テーブルを見やすく表示してくれる
      アプリケーションです。データベースに接続し、
      見たいテーブルを選択するとエクセルのような形式で表示してくれます。
      
      
      #ActiveRecord
      ActiveRecord(アクティブレコード)はRubyのGemの一種です。
      このGemはモデルとテーブルをつなぎ合わせることで、Railsからテーブルのレコードに
      アクセスできるようにします。ActiveRecordはRailsにデフォルトでインストールされています。
      実際に、この機能を利用する際にはActiveRecord::Baseというクラスを継承して使用します。
      < ActiveRecord::Baseと書いてあります。<マークはマークの右に書かれたクラスを
      継承していることを示している
      ActiveRecord::Baseというクラスにはテーブルにアクセスして情報を取得するためのメソッドが
      定義されており、モデルクラスはそれを継承し利用することでテーブルから情報を取得している
      ActiveRecord::Baseはデータベースにアクセスするためのクラスなので、
      そのメソッドもデータベースへのアクセスを行うものになっています。
      ・allメソッド
      ・newメソッド
      ・saveメソッド
      ・createメソッド
      
      
      
      #Classの継承
      あるクラスに定義されたメソッドを、別のクラスで利用できるようにすることを継承と言います。
      元となるクラスを親クラス、親クラスのメソッドを引き継ぎ新しく作成するクラスを子クラス とします。
      
      
      
      # SQL(エス・キュー・エル)
      SQLとは、データベースに対して保存されているデータを要求する時に使用する言語の形式です。
      本来ならデータベースに対しては以下のようなSQL文を使ってデータを
      要求しなければなりませんが、railsではActiveRecordのおかげで簡単に
      データを要求することができます。
      SQL
        SELECT  `tweets`.* FROM `tweets`
      コンソール
        [1] pry(main)> Tweet.all
      
      
      
      #レコードの更新
      テーブルに保存されているレコードを更新するにはそのレコードをインスタンスとして取得し、
      カラムを指定して値を直接代入します。上書きするだけではレコードの値は更新されないので、
      上書きを保存するにはインスタンスのsaveメソッドを使います。
      
      
      
      #Instance変数の呼び出し範囲
      インスタンス変数をtweets_controllerのindexアクションの中で定義したら
      indexアクションに対応したビューである
      app/views/tweets/index.html.erbの中で利用できます。
      Railsの見た目用のファイルであるerbファイルの中でRubyのコードを利用する場合、
      <%= %>という記述で囲います。
      <%= %>を利用するにはビューの拡張子が.erbになっている必要があります。
      
      
      
      #プロパティ値
      ここでプロパティ値とは各カラムに保存されている値のことを指します。
      
      
      
      #simple_format
      simple_formatメソッドは下記の条件で文字列を加工してくれるメソッドです。
      <%= simple_format(引数) % >
      
      
        
      #stylesheet_link_tag
      CSSファイルの読込みはHTMLのヘッダー部分のstylesheet_link_tagから読み込まれます。
      Railsの場合レイアウトファイルがあるので、application.html.erbにヘッダーの記述があります。
      cssファイルはapp/assets/stylesheets/というディレクトリに配置します
      application.html.erbのstylesheet_link_tagの部分にapplicationと書いてあるので、
      このHTMLからはapp/assets/stylesheets/application.cssという
      CSSファイルを読み込むことを示しています。
      
      
      
      #require_tree
      application.cssには、どのcssを読み込むかという設定が書いてあります。
      require_treeには引数として与えられたディレクトリ以下のcssファイルをアルファベット順に
      全て読み込むという意味があります。現在require_treeの引数には.(ドット)が渡されています。
      引数.(ドット)はカレントディレクトリを表します。つまり、
      この記述によってapp/assets/stylesheetsというディレクトリにあるcssファイルは
      全て読み込まれることになります。
      
      
      
      #MVC(エム・ブイ・シー)
      Railsではルーティング→コントローラー→モデル→ビューの順番に処理が行われます。
      このようにモデル(model)とビュー(view)とコントローラー(controller)を使用して
      処理を行なうシステムをそれぞれの頭文字を取ってMVCと呼ばれています。
      以下の図に処理の流れをまとめたので、確認してみましょう。
      
      
      
      #ストロングパラメーター
      ストロングパラメーターとは、指定したキーを持つパラメーターのみを受け取るようにするものです。
      もし仮に悪意のあるユーザーが、不正な情報を送信しようとしたときに、
      ストロングパラメーターを設定しておくと、不正な情報を受け取らずにすみます。
      
      
      
      #ルートパス
      ウェブサイトへアクセスする際などに使用するURLには、
      ホスト名とパスの2つの部分が存在します。「localhost:3000」や「pictweet.me」のように、
      パスを付けないホスト名だけのURLのことをルートパスと言います。
      "
      Rails.application.routes.draw do
        root  'コントローラ名#アクション名'
      end
      "
      
      
      
      # Rubyタグ
      <%=と% >で囲まれた部分をRubyタグと言います。Rubyタグは拡張子が「erb」の
      ビューファイルで使用することができます。Rubyタグを使用して記述されたコードは
      ビューファイルが読み込まれる際にHTMLコードとなって読み込まれます。
      また-%>のように閉じるタグに-をつける形もあります。このようにすることで、
      余計な改行を取り除くことができます。
      
      <%= % >と<% % >の違いは、Rubyタグに囲まれた処理の返り値を出力するか、しないかという違いがあります。
      例１
      <%= tweet.text % >
      これは計算結果を出力したいので<%= % >を使います。
      
      例２
      <% if user.name == "たなかたろう" % >
      これは条件分岐の処理に使いたいだけで、user_signed_in? の
      返り値は特に出力する必要はありません。
      
      
      #アソシエーション
      アソシエーションとはモデル間の関連付けを管理する機能のことで、
      定義しておくことでモデルをまたいだデータの呼び出しをより簡単に行うことができるようになります。
      アソシエーションを利用するために、まずはモデル間の関係を定義しましょう。
      アソシエーションを利用するには以下の2つの条件を満たす必要があります。
      ① モデルクラスにhas_manyやbelongs_toなどの定義がされている
      ② 所属する側のテーブルに所属するクラス名_idというカラムがある
      あるuserの作成したtweetが複数個ある状態のことをhas manyの関係
      "
      class User < ActiveRecord::Base
        devise :database_authenticatable, :registerable,
               :recoverable, :rememberable, :trackable, :validatable
        has_many :tweets
      end
      "
      全てのtweetはいずれかのuserに属している状態のことをbelongs toの関係
      "
      class Tweet < ActiveRecord::Base
        belongs_to :user
      end
      "
      
      
      "n+1問題"
      モデルを利用してデータベースの情報にアクセスする際にはSQLが発行されます。
      SQLが発行されるたびにデータベースに対して通信が走るので、
      SQLが大量に発行されれば処理が重くなります。n+1問題とは、
      データを呼び出す際に大量のSQLが発行されてしまう問題のことです。
      (DBからデータを抽出する操作を、SQLを発行すると表現するのが一般的です。)
      今回の場合、indexアクションで全ツイートを取得する1回に加えて、
      アソシエーションを利用してツイートの数だけユーザー情報を呼び出しています。つまり、
      現在の状態だとツイート数＋1回SQLが発行されています。この状態のことをn+1問題と言います。
      
      
      #Railsのリソースの7つのアクション
      今までのPicTweetの製作を通じて下記の7つのアクションを使ってきました。
      Railsでは、7つの基本アクションへのリクエストが下記の通りデフォルトで設定されています。
      これらのリクエストは、routes.rbにresources :ルーティングを設定したいコントローラ名と
      書くだけで反映させることができます。
      
      アプリケーションの作成において何か機能を追加したい時は、
      まずはこの7つのアクションに当てはまる機能かを考え、そうであれば積極的に利用しましょう。
      ルーティングを楽に設定できると同時に、他の人がコードを読む際わかりやすいという利点があります。
      
      #Railsのリソースの7つのアクション	役割
      index : リソースの一覧を表示する。
      show : リソースの内容を表示する。
      new : リソースを追加する。
      create : リソースを追加し、作成する。
      edit : リソースを更新するためのフォームを表示する。
      update : リソースを更新する。
      destroy : リソースを削除する。
      
      
      
      #ルーティングのネスト
      ネストとは入れ子構造とも呼ばれ、ある記述の中に入れ子構造で別の記述をする方法です。
      ルーティングでいうと、あるコントローラへのルーティングの記述の中に、
      別のコントローラへのルーティングを記述するということを指します。
      
      
      
      #部分テンプレート
      ビューを作成する際に同じようなレイアウトの部分が複数存在する場合があります。例えば、
      Twitterを思い浮かべてください。
      Twitterでは複数のツイートが表示されていますが、これらのHTML構造は全て同じです。
      このような場合に同じHTML構造の部分を共通化することによって、
      無駄なくビューファイルを作成することが出来ます。この共通化された部分を、 
      部分テンプレートといいます。 部分テンプレートを使用した場合、
      そのHTML構造を他のビューでも使いまわすことができるという利点も存在します。
      また、部分テンプレートのファイル名は必ずアンダーバー「_」から始まります。
      
      #スクレイピング
      ウェブサイト上のHTMLからある特定のデータを抜き出す処理のことを言います。
      外部のサーバーからデータを抽出し、集計をしたりするときに役立ちます。
      
      
      
      
      
      
    '''
  }
]
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-13T02:39:33.244Z"
updatedAt: "2018-03-14T06:01:04.046Z"
